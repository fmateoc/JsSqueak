/* Smalltalk from Squeak4.5 with VMMaker 4.20.5 translated as JavaScript source on 4 November 2023 11:12:17 pm *//* Automatically generated by	JSPluginCodeGenerator * VMMakerJS-dtl.18 uuid: 544d97d2-2811-46b7-a653-5c1776f146a4   from	JPEGReaderPlugin * VMMaker-dtl.439 uuid: 2c8ef6e2-8460-4120-b973-009902597787 */var VM_PROXY_MAJOR = 1var VM_PROXY_MINOR = 11/*** Functions ***/function SIZEOF(obj) { return obj.pointers ? obj.pointers.length : obj.longs ? obj.longs.length : obj.words ? obj.words.length : obj.bytes ? obj.bytes.length : typeof obj === "bigint" ? ((obj >= 0 ? obj : -obj).toString(16).length + 1) >>> 1 : 0 }function BYTESIZEOF(obj) { return obj.bytes ? obj.bytes.length : obj.words ? obj.words.length * 4 : obj.longs ? obj.longs.length * 8 : typeof obj === "bigint" ? ((obj >= 0 ? obj : -obj).toString(16).length + 1) >>> 1 : 0 }function BYTESOF(obj) {	if (obj.bytes) return obj.bytes;	if (typeof obj === "bigint") {		let asString = (obj >= 0 ? obj : -obj).toString(16);		const length = (asString.length + 1) >>> 1;		asString = asString.padStart(length << 1, "0");		const bytes = new Uint8Array(length);		for (let i = length - 1, j = 0; i >= 0; i--)			bytes[i] = parseInt(asString.slice(j, j += 2), 16);		return bytes;	}}function CHECKEDINTEGER(val) {	return typeof val === "number" ? val : PrimitiveFailed.signal()}function CHECKEDBOOLEAN(val) {	return typeof val === "boolean"  ? val : PrimitiveFailed.signal()}function UBOR(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a | b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(a - 2147483648 | (b >= 2147483648 ? b - 2147483648 : b)) + 2147483648 :		(b >= 2147483648 ? (b - 2147483648 | a) + 2147483648 : b | a);	}	//unsigned bit orfunction UBORM(a, maskedB) {	a = a >>> 0;	return (a >= 2147483648 ? a - 2147483648 | maskedB : a | maskedB) + 2147483648;	}	//unsigned bit orfunction UBORS(a, smallB) {	if ((a | 0) === a)		return a | smallB;	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 | smallB) + 2147483648 : a | smallB;	}	//unsigned bit orfunction UBAND(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a & b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(b >= 2147483648 ? (b - 2147483648 & a - 2147483648) + 2147483648 : b & a - 2147483648) :		(b >= 2147483648 ? (b - 2147483648 & a) : b & a);	}	//unsigned bit andfunction UBANDM(a, maskedB) {	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 & maskedB) + 2147483648 : a & maskedB;	}	//unsigned bit andfunction UBANDS(a, smallB) {	if ((a | 0) === a)		return a & smallB;	a = a >>> 0;	return a >= 2147483648 ? a - 2147483648 & smallB : a & smallB;	}	//unsigned bit andfunction UBXOR(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a ^ b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(b >= 2147483648 ? b - 2147483648 ^ a - 2147483648 : (b ^ a - 2147483648) + 2147483648) :		(b >= 2147483648 ? (b - 2147483648 ^ a) + 2147483648 : b ^ a);	}	//unsigned bit xorfunction UBXORM(a, maskedB) {	a = a >>> 0;	return a >= 2147483648 ? a - 2147483648 ^ maskedB : (a ^ maskedB) + 2147483648;	}	//unsigned bit xorfunction UBXORS(a, smallB) {	if ((a | 0) === a)		return a ^ smallB;	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 ^ smallB) + 2147483648 : a ^ smallB;	}	//unsigned bit xorfunction MOD(a, b) {	return a - Math.trunc(a / b) * b >>> 0; }   // signed modulusfunction SHL(a, b) {	return b > 31 ? (a === 1 && b === 32 ? 4294967296 : 0) : a << b >>> 0 }function SHR(a, b) {	return b > 31 ? 0 : a >>> b }function SHIFT(a, b) {	b = b | 0;	return b < 0 ? (b < -31 ? 0 : a >>> -b ) : (b > 31 ? (a === 1 && b === 32 ? 4294967296 : 0) : a << b >>> 0) }function PTR_ADD(p, n) { return new Int32Array(p.buffer, p.byteOffset + n * 4); }function CPTR_ADD(p, n) { return new Int8Array(p.buffer, p.byteOffset + n); }function FPTR_ADD(p, n) { return new Float32Array(p.buffer, p.byteOffset + n * 4); }function PTR_SUB(p, n) { return new Int32Array(p.buffer, p.byteOffset - n * 4); }function CPTR_SUB(p, n) { return new Int8Array(p.buffer, p.byteOffset - n); }function FPTR_SUB(p, n) { return new Float32Array(p.buffer, p.byteOffset - n * 4); }function PTR_PTRSUB(p1, p2) { return p1.buffer === p2.buffer ? p1.byteOffset - p2.byteOffset : 0 }/*** Variables ***/let acTable;let acTableSize = 0;let cbBlocks = new Array(128);let cbComponent = new Array(11);let crBlocks = new Array(128);let crComponent = new Array(11);let dcTable;let dcTableSize = 0;let ditherMask = 0;let jpegBits;let jpegBitsSize = 0;let jpegNaturalOrder = [	0, 1, 8, 16, 9, 2, 3, 10, 	17, 24, 32, 25, 18, 11, 4, 5, 	12, 19, 26, 33, 40, 48, 41, 34, 	27, 20, 13, 6, 7, 14, 21, 28, 	35, 42, 49, 56, 57, 50, 43, 36, 	29, 22, 15, 23, 30, 37, 44, 51, 	58, 59, 52, 45, 38, 31, 39, 46, 	53, 60, 61, 54, 47, 55, 62, 63];let jsBitBuffer = 0;let jsBitCount = 0;let jsCollection;let jsPosition = 0;let jsReadLimit = 0;let residuals;let yBlocks = new Array(128);let yComponent = new Array(11);globalThis.JPEGReaderPlugin = {colorComponentfrom(aColorComponent, oop) {	if ((typeof oop === "number")) {		return false;	} else {		if ((oop.storageType === "pointers")) {			if (SIZEOF(oop) < 11) {				return false;			} else {				aColorComponent[0] = oop.pointers[0];				aColorComponent[1] = oop.pointers[1];				aColorComponent[2] = oop.pointers[2];				aColorComponent[3] = oop.pointers[3];				aColorComponent[5] = oop.pointers[5];				aColorComponent[8] = oop.pointers[8];				aColorComponent[10] = oop.pointers[10];				return true;			}		} else {			return false;		}	}}, getBits(requestedBits) {	let value;	let byte;	let brokenFromLoop_fillBuffer_204;	if (requestedBits > jsBitCount) {		/* begin fillBuffer */		brokenFromLoop_fillBuffer_204 = false;		while (jsBitCount <= 16) {			if (jsPosition < jsReadLimit) {				byte = jsCollection[jsPosition];				++jsPosition;				if (byte === 255) {					if ((jsPosition < jsReadLimit) && (jsCollection[jsPosition] === 0)) {						++jsPosition;					} else {						--jsPosition;						brokenFromLoop_fillBuffer_204 = true;						break;					}				}				jsBitBuffer = UBOR((jsBitBuffer << 8 >>> 0), byte);				jsBitCount += 8;			} else {				brokenFromLoop_fillBuffer_204 = true;				break;			}		}		/* end fillBuffer */		if (requestedBits > jsBitCount) {			return -1;		}	}	jsBitCount -= requestedBits;	value = SHR(jsBitBuffer, jsBitCount);	jsBitBuffer = UBAND(jsBitBuffer, ((SHL(1, jsBitCount)) - 1));	return value;}, /*	Requires:		JPEGColorComponent		bits		WordArray with: 3*Integer (residuals)		ditherMask	 */primitiveColorConvertGrayscaleMCU(arrayOop1, arrayOop2, arrayOop3, arg1) {	let arrayOop;	let blockOop;	let i;	let max;	let returnValueFromLoop_colorComponentBlocksfrom_3270;	let brokenFromLoop_colorComponentBlocksfrom_3270;	let i1;	let y;	let blockIndex;	let curX;	let dx;	let dy;	let sample;	let sampleIndex;	let sx;	let sy;	/* begin stInit */	/* end stInit */	if (arguments.length !== 4) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	ditherMask = ((typeof arg1 === "number") ? arg1 : PrimitiveFailed.signal());	if (typeof arrayOop3 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if (!((arrayOop3.storageType === "words") && (SIZEOF(arrayOop3) === 3))) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	residuals = arrayOop3.wordsAsInt32Array();	if (typeof arrayOop2 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if ((arrayOop2.storageType !== "words")) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	jpegBitsSize = SIZEOF(arrayOop2);	jpegBits = arrayOop2.wordsAsInt32Array();	if (typeof arrayOop1 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	let rec1;if (JPEGReaderPlugin.colorComponentfrom(yComponent, arrayOop1)) {		/* begin colorComponentBlocks:from: */		if ((typeof arrayOop1 === "number")) {			rec1 = false;		} else {			if ((arrayOop1.storageType === "pointers")) {				if (SIZEOF(arrayOop1) < 11) {					rec1 = false;				} else {					arrayOop = arrayOop1.pointers[4];					if ((typeof arrayOop === "number")) {						rec1 = false;					} else {						if ((arrayOop.storageType === "pointers")) {							max = SIZEOF(arrayOop);							if (max > 128) {								rec1 = false;							} else {								brokenFromLoop_colorComponentBlocksfrom_3270 = false;								for (i = 0; i < max; i++) {									blockOop = arrayOop.pointers[i];									if ((typeof blockOop === "number")) {										returnValueFromLoop_colorComponentBlocksfrom_3270 = false;										brokenFromLoop_colorComponentBlocksfrom_3270 = true;										break;									} else {										if ((blockOop.storageType === "words")) {											if (SIZEOF(blockOop) === 64) {												yBlocks[i] = blockOop.wordsAsInt32Array();											} else {												returnValueFromLoop_colorComponentBlocksfrom_3270 = false;												brokenFromLoop_colorComponentBlocksfrom_3270 = true;												break;											}										} else {											returnValueFromLoop_colorComponentBlocksfrom_3270 = false;											brokenFromLoop_colorComponentBlocksfrom_3270 = true;											break;										}									}								}								rec1 = (!brokenFromLoop_colorComponentBlocksfrom_3270 || returnValueFromLoop_colorComponentBlocksfrom_3270);							}						} else {							rec1 = false;						}					}				}			} else {				rec1 = false;			}		}		/* end colorComponentBlocks:from: */	} else {		rec1 = false;	};if (!rec1) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	/* begin colorConvertGrayscaleMCU */	yComponent[0] = 0;	yComponent[1] = 0;	for (i1 = 0; i1 < jpegBitsSize; i1++) {		/* begin nextSampleY */		dx = curX = yComponent[0];		dy = yComponent[1];		sx = yComponent[2];		sy = yComponent[3];		if ((sx !== 0) && (sy !== 0)) {			dx = Math.trunc(dx / sx);			dy = Math.trunc(dy / sy);		}		blockIndex = ((dy >>> 3) * yComponent[5]) + (dx >>> 3);		sampleIndex = ((UBANDS(dy, 7)) << 3 >>> 0) + (UBANDS(dx, 7));		sample = yBlocks[blockIndex][sampleIndex];		++curX;		if (curX < (yComponent[8] * 8)) {			yComponent[0] = curX;		} else {			yComponent[0] = 0;			yComponent[1]++;		}		y = sample;		/* end nextSampleY */		y += residuals[1];		y = Math.min(y, 255);		residuals[1] = (UBAND(y, ditherMask));		y = UBAND(y, (255 - ditherMask));		y = Math.max(y, 1);		jpegBits[i1] = ((y << 16 >>> 0) + (y << 8 >>> 0) + y + 4278190080);	}	/* end colorConvertGrayscaleMCU */	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Requires:		Array with: 3*JPEGColorComponent		bits		WordArray with: 3*Integer (residuals)		ditherMask	 */primitiveColorConvertMCU(arrayOop1, arrayOop2, arrayOop3, arg1) {	let oop;	let arrayOop;	let blockOop;	let i;	let max;	let returnValueFromLoop_colorComponentBlocksfrom_455;	let brokenFromLoop_colorComponentBlocksfrom_455;	let oop1;	let arrayOop4;	let blockOop1;	let i1;	let max1;	let returnValueFromLoop_colorComponentBlocksfrom_441;	let brokenFromLoop_colorComponentBlocksfrom_441;	let oop2;	let arrayOop5;	let blockOop2;	let i2;	let max2;	let returnValueFromLoop_colorComponentBlocksfrom_1311;	let brokenFromLoop_colorComponentBlocksfrom_1311;	let blue;	let cb;	let cr;	let green;	let i3;	let red;	let y;	let blockIndex;	let curX;	let dx;	let dy;	let sample;	let sampleIndex;	let sx;	let sy;	let blockIndex1;	let curX1;	let dx1;	let dy1;	let sample1;	let sampleIndex1;	let sx1;	let sy1;	let blockIndex2;	let curX2;	let dx2;	let dy2;	let sample2;	let sampleIndex2;	let sx2;	let sy2;	/* begin stInit */	/* end stInit */	if (arguments.length !== 4) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	ditherMask = ((typeof arg1 === "number") ? arg1 : PrimitiveFailed.signal());	if (typeof arrayOop3 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if (!((arrayOop3.storageType === "words") && (SIZEOF(arrayOop3) === 3))) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	residuals = arrayOop3.wordsAsInt32Array();	if (typeof arrayOop2 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if ((arrayOop2.storageType !== "words")) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	jpegBitsSize = SIZEOF(arrayOop2);	jpegBits = arrayOop2.wordsAsInt32Array();	if (typeof arrayOop1 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if (!((arrayOop1.storageType === "pointers") && (SIZEOF(arrayOop1) === 3))) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	/* begin yColorComponentFrom: */	oop1 = arrayOop1.pointers[0];	/* begin colorComponent:from: */	if ((typeof oop1 === "number")) {		throw Object.create(PrimitiveFailed).setPayload(1);	} else {		if ((oop1.storageType === "pointers")) {			if (SIZEOF(oop1) < 11) {				throw Object.create(PrimitiveFailed).setPayload(1);			} else {				yComponent[0] = oop1.pointers[0];				yComponent[1] = oop1.pointers[1];				yComponent[2] = oop1.pointers[2];				yComponent[3] = oop1.pointers[3];				yComponent[5] = oop1.pointers[5];				yComponent[8] = oop1.pointers[8];				yComponent[10] = oop1.pointers[10];				/* begin colorComponentBlocks:from: */				if ((typeof oop1 === "number")) {					throw Object.create(PrimitiveFailed).setPayload(1);				} else {					if ((oop1.storageType === "pointers")) {						if (SIZEOF(oop1) < 11) {							throw Object.create(PrimitiveFailed).setPayload(1);						} else {							arrayOop4 = oop1.pointers[4];							if ((typeof arrayOop4 === "number")) {								throw Object.create(PrimitiveFailed).setPayload(1);							} else {								if ((arrayOop4.storageType === "pointers")) {									max1 = SIZEOF(arrayOop4);									if (max1 > 128) {										throw Object.create(PrimitiveFailed).setPayload(1);									} else {										brokenFromLoop_colorComponentBlocksfrom_441 = false;										for (i1 = 0; i1 < max1; i1++) {											blockOop1 = arrayOop4.pointers[i1];											if ((typeof blockOop1 === "number")) {												returnValueFromLoop_colorComponentBlocksfrom_441 = false;												brokenFromLoop_colorComponentBlocksfrom_441 = true;												break;											} else {												if ((blockOop1.storageType === "words")) {													if (SIZEOF(blockOop1) === 64) {														yBlocks[i1] = blockOop1.wordsAsInt32Array();													} else {														returnValueFromLoop_colorComponentBlocksfrom_441 = false;														brokenFromLoop_colorComponentBlocksfrom_441 = true;														break;													}												} else {													returnValueFromLoop_colorComponentBlocksfrom_441 = false;													brokenFromLoop_colorComponentBlocksfrom_441 = true;													break;												}											}										}										if (brokenFromLoop_colorComponentBlocksfrom_441) {											if (!returnValueFromLoop_colorComponentBlocksfrom_441) {												throw Object.create(PrimitiveFailed).setPayload(1);											}										}									}								} else {									throw Object.create(PrimitiveFailed).setPayload(1);								}							}						}					} else {						throw Object.create(PrimitiveFailed).setPayload(1);					}				}				/* end colorComponentBlocks:from: */			}		} else {			throw Object.create(PrimitiveFailed).setPayload(1);		}	}	/* end colorComponent:from: */	/* end yColorComponentFrom: */	/* begin cbColorComponentFrom: */	oop2 = arrayOop1.pointers[1];	/* begin colorComponent:from: */	if ((typeof oop2 === "number")) {		throw Object.create(PrimitiveFailed).setPayload(1);	} else {		if ((oop2.storageType === "pointers")) {			if (SIZEOF(oop2) < 11) {				throw Object.create(PrimitiveFailed).setPayload(1);			} else {				cbComponent[0] = oop2.pointers[0];				cbComponent[1] = oop2.pointers[1];				cbComponent[2] = oop2.pointers[2];				cbComponent[3] = oop2.pointers[3];				cbComponent[5] = oop2.pointers[5];				cbComponent[8] = oop2.pointers[8];				cbComponent[10] = oop2.pointers[10];				/* begin colorComponentBlocks:from: */				if ((typeof oop2 === "number")) {					throw Object.create(PrimitiveFailed).setPayload(1);				} else {					if ((oop2.storageType === "pointers")) {						if (SIZEOF(oop2) < 11) {							throw Object.create(PrimitiveFailed).setPayload(1);						} else {							arrayOop5 = oop2.pointers[4];							if ((typeof arrayOop5 === "number")) {								throw Object.create(PrimitiveFailed).setPayload(1);							} else {								if ((arrayOop5.storageType === "pointers")) {									max2 = SIZEOF(arrayOop5);									if (max2 > 128) {										throw Object.create(PrimitiveFailed).setPayload(1);									} else {										brokenFromLoop_colorComponentBlocksfrom_1311 = false;										for (i2 = 0; i2 < max2; i2++) {											blockOop2 = arrayOop5.pointers[i2];											if ((typeof blockOop2 === "number")) {												returnValueFromLoop_colorComponentBlocksfrom_1311 = false;												brokenFromLoop_colorComponentBlocksfrom_1311 = true;												break;											} else {												if ((blockOop2.storageType === "words")) {													if (SIZEOF(blockOop2) === 64) {														cbBlocks[i2] = blockOop2.wordsAsInt32Array();													} else {														returnValueFromLoop_colorComponentBlocksfrom_1311 = false;														brokenFromLoop_colorComponentBlocksfrom_1311 = true;														break;													}												} else {													returnValueFromLoop_colorComponentBlocksfrom_1311 = false;													brokenFromLoop_colorComponentBlocksfrom_1311 = true;													break;												}											}										}										if (brokenFromLoop_colorComponentBlocksfrom_1311) {											if (!returnValueFromLoop_colorComponentBlocksfrom_1311) {												throw Object.create(PrimitiveFailed).setPayload(1);											}										}									}								} else {									throw Object.create(PrimitiveFailed).setPayload(1);								}							}						}					} else {						throw Object.create(PrimitiveFailed).setPayload(1);					}				}				/* end colorComponentBlocks:from: */			}		} else {			throw Object.create(PrimitiveFailed).setPayload(1);		}	}	/* end colorComponent:from: */	/* end cbColorComponentFrom: */	/* begin crColorComponentFrom: */	oop = arrayOop1.pointers[2];	/* begin colorComponent:from: */	if ((typeof oop === "number")) {		throw Object.create(PrimitiveFailed).setPayload(1);	} else {		if ((oop.storageType === "pointers")) {			if (SIZEOF(oop) < 11) {				throw Object.create(PrimitiveFailed).setPayload(1);			} else {				crComponent[0] = oop.pointers[0];				crComponent[1] = oop.pointers[1];				crComponent[2] = oop.pointers[2];				crComponent[3] = oop.pointers[3];				crComponent[5] = oop.pointers[5];				crComponent[8] = oop.pointers[8];				crComponent[10] = oop.pointers[10];				/* begin colorComponentBlocks:from: */				if ((typeof oop === "number")) {					throw Object.create(PrimitiveFailed).setPayload(1);				} else {					if ((oop.storageType === "pointers")) {						if (SIZEOF(oop) < 11) {							throw Object.create(PrimitiveFailed).setPayload(1);						} else {							arrayOop = oop.pointers[4];							if ((typeof arrayOop === "number")) {								throw Object.create(PrimitiveFailed).setPayload(1);							} else {								if ((arrayOop.storageType === "pointers")) {									max = SIZEOF(arrayOop);									if (max > 128) {										throw Object.create(PrimitiveFailed).setPayload(1);									} else {										brokenFromLoop_colorComponentBlocksfrom_455 = false;										for (i = 0; i < max; i++) {											blockOop = arrayOop.pointers[i];											if ((typeof blockOop === "number")) {												returnValueFromLoop_colorComponentBlocksfrom_455 = false;												brokenFromLoop_colorComponentBlocksfrom_455 = true;												break;											} else {												if ((blockOop.storageType === "words")) {													if (SIZEOF(blockOop) === 64) {														crBlocks[i] = blockOop.wordsAsInt32Array();													} else {														returnValueFromLoop_colorComponentBlocksfrom_455 = false;														brokenFromLoop_colorComponentBlocksfrom_455 = true;														break;													}												} else {													returnValueFromLoop_colorComponentBlocksfrom_455 = false;													brokenFromLoop_colorComponentBlocksfrom_455 = true;													break;												}											}										}										if (brokenFromLoop_colorComponentBlocksfrom_455) {											if (!returnValueFromLoop_colorComponentBlocksfrom_455) {												throw Object.create(PrimitiveFailed).setPayload(1);											}										}									}								} else {									throw Object.create(PrimitiveFailed).setPayload(1);								}							}						}					} else {						throw Object.create(PrimitiveFailed).setPayload(1);					}				}				/* end colorComponentBlocks:from: */			}		} else {			throw Object.create(PrimitiveFailed).setPayload(1);		}	}	/* end colorComponent:from: */	/* end crColorComponentFrom: */	/* begin colorConvertMCU */	yComponent[0] = 0;	yComponent[1] = 0;	cbComponent[0] = 0;	cbComponent[1] = 0;	crComponent[0] = 0;	crComponent[1] = 0;	for (i3 = 0; i3 < jpegBitsSize; i3++) {		/* begin nextSampleY */		dx = curX = yComponent[0];		dy = yComponent[1];		sx = yComponent[2];		sy = yComponent[3];		if ((sx !== 0) && (sy !== 0)) {			dx = Math.trunc(dx / sx);			dy = Math.trunc(dy / sy);		}		blockIndex = ((dy >>> 3) * yComponent[5]) + (dx >>> 3);		sampleIndex = ((UBANDS(dy, 7)) << 3 >>> 0) + (UBANDS(dx, 7));		sample = yBlocks[blockIndex][sampleIndex];		++curX;		if (curX < (yComponent[8] * 8)) {			yComponent[0] = curX;		} else {			yComponent[0] = 0;			yComponent[1]++;		}		y = sample;		/* end nextSampleY */		/* begin nextSampleCb */		dx1 = curX1 = cbComponent[0];		dy1 = cbComponent[1];		sx1 = cbComponent[2];		sy1 = cbComponent[3];		if ((sx1 !== 0) && (sy1 !== 0)) {			dx1 = Math.trunc(dx1 / sx1);			dy1 = Math.trunc(dy1 / sy1);		}		blockIndex1 = ((dy1 >>> 3) * cbComponent[5]) + (dx1 >>> 3);		sampleIndex1 = ((UBANDS(dy1, 7)) << 3 >>> 0) + (UBANDS(dx1, 7));		sample1 = cbBlocks[blockIndex1][sampleIndex1];		++curX1;		if (curX1 < (cbComponent[8] * 8)) {			cbComponent[0] = curX1;		} else {			cbComponent[0] = 0;			cbComponent[1]++;		}		cb = sample1;		/* end nextSampleCb */		cb -= 127;		/* begin nextSampleCr */		dx2 = curX2 = crComponent[0];		dy2 = crComponent[1];		sx2 = crComponent[2];		sy2 = crComponent[3];		if ((sx2 !== 0) && (sy2 !== 0)) {			dx2 = Math.trunc(dx2 / sx2);			dy2 = Math.trunc(dy2 / sy2);		}		blockIndex2 = ((dy2 >>> 3) * crComponent[5]) + (dx2 >>> 3);		sampleIndex2 = ((UBANDS(dy2, 7)) << 3 >>> 0) + (UBANDS(dx2, 7));		sample2 = crBlocks[blockIndex2][sampleIndex2];		++curX2;		if (curX2 < (crComponent[8] * 8)) {			crComponent[0] = curX2;		} else {			crComponent[0] = 0;			crComponent[1]++;		}		cr = sample2;		/* end nextSampleCr */		cr -= 127;		red = (y + ((91881 * cr) >> 16)) + residuals[0];		red = Math.min(red, 255);		red = Math.max(red, 0);		residuals[0] = (UBAND(red, ditherMask));		red = UBAND(red, (255 - ditherMask));		red = Math.max(red, 1);		green = ((y - ((22554 * cb) >> 16)) - ((46802 * cr) >> 16)) + residuals[1];		green = Math.min(green, 255);		green = Math.max(green, 0);		residuals[1] = (UBAND(green, ditherMask));		green = UBAND(green, (255 - ditherMask));		green = Math.max(green, 1);		blue = (y + ((116130 * cb) >> 16)) + residuals[2];		blue = Math.min(blue, 255);		blue = Math.max(blue, 0);		residuals[2] = (UBAND(blue, ditherMask));		blue = UBAND(blue, (255 - ditherMask));		blue = Math.max(blue, 1);		jpegBits[i3] = ((red << 16 >>> 0) + (green << 8 >>> 0) + blue + 4278190080);	}	/* end colorConvertMCU */	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	In:		anArray 		WordArray of: DCTSize2		aColorComponent JPEGColorComponent		dcTable			WordArray		acTable			WordArray		stream			JPEGStream	 */primitiveDecodeMCU(arrayOop1, oop1, arrayOop2, arrayOop3, oop2) {	let anArray;	let oop;	let sz;	let streamOop;	let bits;	let byte;	let i;	let index;	let zeroCount;	let bits1;	let bitsNeeded;	let index1;	let tableIndex;	let value;	let brokenFromLoop_jpegDecodeValueFromsize_1976;	let bits2;	let bitsNeeded1;	let index2;	let tableIndex1;	let value1;	let brokenFromLoop_jpegDecodeValueFromsize_2826;	if (arguments.length !== 5) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	if (typeof oop2 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	/* begin loadJPEGStreamFrom: */	if (SIZEOF(oop2) < 5) {		throw Object.create(PrimitiveFailed).setPayload(1);	} else {		if ((oop2.storageType === "pointers")) {			oop = oop2.pointers[0];			if ((typeof oop === "number")) {				throw Object.create(PrimitiveFailed).setPayload(1);			} else {				if ((oop.storageType === "bytes")) {					jsCollection = BYTESOF(oop);					sz = BYTESIZEOF(oop);					jsPosition = oop2.pointers[1];					jsReadLimit = oop2.pointers[2];					jsBitBuffer = oop2.pointers[3];					jsBitCount = oop2.pointers[4];					if (!((sz >= jsReadLimit && (!((jsPosition < 0) || (jsPosition >= jsReadLimit)))))) {						throw Object.create(PrimitiveFailed).setPayload(1);					}				} else {					throw Object.create(PrimitiveFailed).setPayload(1);				}			}		} else {			throw Object.create(PrimitiveFailed).setPayload(1);		}	}	/* end loadJPEGStreamFrom: */	if (typeof arrayOop3 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if ((arrayOop3.storageType !== "words")) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	acTableSize = SIZEOF(arrayOop3);	acTable = arrayOop3.wordsAsInt32Array();	if (typeof arrayOop2 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if ((arrayOop2.storageType !== "words")) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	dcTableSize = SIZEOF(arrayOop2);	dcTable = arrayOop2.wordsAsInt32Array();	if (typeof oop1 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	/* begin colorComponent:from: */	if ((typeof oop1 === "number")) {		throw Object.create(PrimitiveFailed).setPayload(1);	} else {		if ((oop1.storageType === "pointers")) {			if (SIZEOF(oop1) < 11) {				throw Object.create(PrimitiveFailed).setPayload(1);			} else {				yComponent[0] = oop1.pointers[0];				yComponent[1] = oop1.pointers[1];				yComponent[2] = oop1.pointers[2];				yComponent[3] = oop1.pointers[3];				yComponent[5] = oop1.pointers[5];				yComponent[8] = oop1.pointers[8];				yComponent[10] = oop1.pointers[10];			}		} else {			throw Object.create(PrimitiveFailed).setPayload(1);		}	}	/* end colorComponent:from: */	if (typeof arrayOop1 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if ((arrayOop1.storageType !== "words")) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	if (SIZEOF(arrayOop1) !== 64) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	anArray = arrayOop1.wordsAsInt32Array();	/* begin decodeBlockInto:component: */	/* begin jpegDecodeValueFrom:size: */	bitsNeeded1 = dcTable[0] >>> 24;	if (bitsNeeded1 > 16) {		byte = -1;	} else {		tableIndex1 = 2;		brokenFromLoop_jpegDecodeValueFromsize_2826 = false;		while (true) {			bits2 = JPEGReaderPlugin.getBits(bitsNeeded1);			if (bits2 < 0) {				byte = -1;				brokenFromLoop_jpegDecodeValueFromsize_2826 = true;				break;			} else {				index2 = (tableIndex1 + bits2) - 1;				if (index2 >= dcTableSize) {					byte = -1;					brokenFromLoop_jpegDecodeValueFromsize_2826 = true;					break;				} else {					value1 = dcTable[index2];					if ((UBANDS(value1, 1056964608)) === 0) {						byte = value1;						brokenFromLoop_jpegDecodeValueFromsize_2826 = true;						break;					} else {						tableIndex1 = UBANDS(value1, 65535);						bitsNeeded1 = UBANDS((value1 >>> 24), 255);						if (bitsNeeded1 > 16) {							byte = -1;							brokenFromLoop_jpegDecodeValueFromsize_2826 = true;							break;						}					}				}			}		}		if (!brokenFromLoop_jpegDecodeValueFromsize_2826) {			byte = -1;		}	}	/* end jpegDecodeValueFrom:size: */	if (byte < 0) {		throw Object.create(PrimitiveFailed).setPayload(1);	} else {		if (byte !== 0) {			bits = JPEGReaderPlugin.getBits(byte);			byte = (bits < (SHL(1, (byte - 1)))) ? ((bits - (SHL(1, byte))) + 1) : bits;		}		byte = yComponent[10] += byte;		anArray[0] = byte;		const iLimiT = 64;		for (i = 1; i < iLimiT; i++) {			anArray[i] = 0;		}		index = 1;		while (index < 64) {			/* begin jpegDecodeValueFrom:size: */			bitsNeeded = acTable[0] >>> 24;			if (bitsNeeded > 16) {				byte = -1;			} else {				tableIndex = 2;				brokenFromLoop_jpegDecodeValueFromsize_1976 = false;				while (true) {					bits1 = JPEGReaderPlugin.getBits(bitsNeeded);					if (bits1 < 0) {						byte = -1;						brokenFromLoop_jpegDecodeValueFromsize_1976 = true;						break;					} else {						index1 = (tableIndex + bits1) - 1;						if (index1 >= acTableSize) {							byte = -1;							brokenFromLoop_jpegDecodeValueFromsize_1976 = true;							break;						} else {							value = acTable[index1];							if ((UBANDS(value, 1056964608)) === 0) {								byte = value;								brokenFromLoop_jpegDecodeValueFromsize_1976 = true;								break;							} else {								tableIndex = UBANDS(value, 65535);								bitsNeeded = UBANDS((value >>> 24), 255);								if (bitsNeeded > 16) {									byte = -1;									brokenFromLoop_jpegDecodeValueFromsize_1976 = true;									break;								}							}						}					}				}				if (!brokenFromLoop_jpegDecodeValueFromsize_1976) {					byte = -1;				}			}			/* end jpegDecodeValueFrom:size: */			if (byte < 0) {				throw Object.create(PrimitiveFailed).setPayload(1);			} else {				zeroCount = byte >>> 4;				byte = UBANDS(byte, 15);				if (byte !== 0) {					index += zeroCount;					bits = JPEGReaderPlugin.getBits(byte);					byte = (bits < (SHL(1, (byte - 1)))) ? ((bits - (SHL(1, byte))) + 1) : bits;					if ((index < 0) || (index >= 64)) {						throw Object.create(PrimitiveFailed).setPayload(1);					} else {						anArray[jpegNaturalOrder[index]] = byte;					}				} else {					if (zeroCount === 15) {						index += zeroCount;					} else {						break;					}				}				++index;			}		}	}	/* end decodeBlockInto:component: */	/* begin storeJPEGStreamOn: */	streamOop.pointers[1] = jsPosition;	streamOop.pointers[3] = jsBitBuffer;	streamOop.pointers[4] = jsBitCount;	/* end storeJPEGStreamOn: */	oop1.pointers[10] = yComponent[10];	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	In:		anArray: IntegerArray new: DCTSize2		qt: IntegerArray new: DCTSize2.	 */primitiveIdctInt(arrayOop1, arrayOop2) {	let anArray;	let qt;	let anACTerm;	let dcval;	let i;	let i1;	let j;	let row;	let t0;	let t1;	let t10;	let t11;	let t12;	let t13;	let t2;	let t3;	let v;	let ws = new Array(64);	let z1;	let z2;	let z3;	let z4;	let z5;	if (arguments.length !== 2) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	if (typeof arrayOop2 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if (!((arrayOop2.storageType === "words") && (SIZEOF(arrayOop2) === 64))) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	qt = arrayOop2.wordsAsInt32Array();	if (typeof arrayOop1 === "number") throw Object.create(PrimitiveFailed).setPayload(1);	if (!((arrayOop1.storageType === "words") && (SIZEOF(arrayOop1) === 64))) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	anArray = arrayOop1.wordsAsInt32Array();	/* begin idctBlockInt:qt: */	const iLimiT = 8;	for (i = 0; i < iLimiT; i++) {		anACTerm = -1;		const rowLimiT = 8;		for (row = 1; row < rowLimiT; row++) {			if (anACTerm === -1) {				if (anArray[(row * 8) + i] !== 0) {					anACTerm = row;				}			}		}		if (anACTerm === -1) {			dcval = (anArray[i] * qt[0]) << 2 >>> 0;			const jLimiT = 8;			for (j = 0; j < jLimiT; j++) {				ws[(j * 8) + i] = dcval;			}		} else {			z2 = anArray[(16) + i] * qt[(16) + i];			z3 = anArray[(48) + i] * qt[(48) + i];			z1 = (z2 + z3) * 4433;			t2 = z1 + (z3 * (-15137));			t3 = z1 + (z2 * 6270);			z2 = anArray[i] * qt[i];			z3 = anArray[(32) + i] * qt[(32) + i];			t0 = (z2 + z3) << 13 >>> 0;			t1 = (z2 - z3) << 13 >>> 0;			t10 = t0 + t3;			t13 = t0 - t3;			t11 = t1 + t2;			t12 = t1 - t2;			t0 = anArray[(56) + i] * qt[(56) + i];			t1 = anArray[(40) + i] * qt[(40) + i];			t2 = anArray[(24) + i] * qt[(24) + i];			t3 = anArray[i + 8] * qt[i + 8];			z1 = t0 + t3;			z2 = t1 + t2;			z3 = t0 + t2;			z4 = t1 + t3;			z5 = (z3 + z4) * 9633;			t0 = t0 * 2446;			t1 = t1 * 16819;			t2 = t2 * 25172;			t3 = t3 * 12299;			z1 = z1 * (-7373);			z2 = z2 * (-20995);			z3 = z3 * (-16069);			z4 = z4 * (-3196);			z3 += z5;			z4 += z5;			t0 = (t0 + z1) + z3;			t1 = (t1 + z2) + z4;			t2 = (t2 + z2) + z3;			t3 = (t3 + z1) + z4;			ws[i] = ((t10 + t3) >> 11);			ws[(56) + i] = ((t10 - t3) >> 11);			ws[(8) + i] = ((t11 + t2) >> 11);			ws[(48) + i] = ((t11 - t2) >> 11);			ws[(16) + i] = ((t12 + t1) >> 11);			ws[(40) + i] = ((t12 - t1) >> 11);			ws[(24) + i] = ((t13 + t0) >> 11);			ws[(32) + i] = ((t13 - t0) >> 11);		}	}	for (i1 = 0; i1 <= (56); i1 += 8) {		z2 = ws[i1 + 2];		z3 = ws[i1 + 6];		z1 = (z2 + z3) * 4433;		t2 = z1 + (z3 * (-15137));		t3 = z1 + (z2 * 6270);		t0 = (ws[i1] + ws[i1 + 4]) << 13 >>> 0;		t1 = (ws[i1] - ws[i1 + 4]) << 13 >>> 0;		t10 = t0 + t3;		t13 = t0 - t3;		t11 = t1 + t2;		t12 = t1 - t2;		t0 = ws[i1 + 7];		t1 = ws[i1 + 5];		t2 = ws[i1 + 3];		t3 = ws[i1 + 1];		z1 = t0 + t3;		z2 = t1 + t2;		z3 = t0 + t2;		z4 = t1 + t3;		z5 = (z3 + z4) * 9633;		t0 = t0 * 2446;		t1 = t1 * 16819;		t2 = t2 * 25172;		t3 = t3 * 12299;		z1 = z1 * (-7373);		z2 = z2 * (-20995);		z3 = z3 * (-16069);		z4 = z4 * (-3196);		z3 += z5;		z4 += z5;		t0 = (t0 + z1) + z3;		t1 = (t1 + z2) + z4;		t2 = (t2 + z2) + z3;		t3 = (t3 + z1) + z4;		v = ((t10 + t3) >> 18) + 127;		v = Math.min(v, 255);		v = Math.max(v, 0);		anArray[i1] = v;		v = ((t10 - t3) >> 18) + 127;		v = Math.min(v, 255);		v = Math.max(v, 0);		anArray[i1 + 7] = v;		v = ((t11 + t2) >> 18) + 127;		v = Math.min(v, 255);		v = Math.max(v, 0);		anArray[i1 + 1] = v;		v = ((t11 - t2) >> 18) + 127;		v = Math.min(v, 255);		v = Math.max(v, 0);		anArray[i1 + 6] = v;		v = ((t12 + t1) >> 18) + 127;		v = Math.min(v, 255);		v = Math.max(v, 0);		anArray[i1 + 2] = v;		v = ((t12 - t1) >> 18) + 127;		v = Math.min(v, 255);		v = Math.max(v, 0);		anArray[i1 + 5] = v;		v = ((t13 + t0) >> 18) + 127;		v = Math.min(v, 255);		v = Math.max(v, 0);		anArray[i1 + 3] = v;		v = ((t13 - t0) >> 18) + 127;		v = Math.min(v, 255);		v = Math.max(v, 0);		anArray[i1 + 4] = v;	}	/* end idctBlockInt:qt: */	throw Object.create(PrimitiveReturn).setPayload(this);}, stInit() {}, }