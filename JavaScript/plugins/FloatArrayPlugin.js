/* Smalltalk from Squeak4.5 with VMMaker 4.20.5 translated as JavaScript source on 26 July 2023 12:01:59 am *//* Automatically generated by	JSPluginCodeGenerator * VMMakerJS-dtl.18 uuid: 544d97d2-2811-46b7-a653-5c1776f146a4   from	FloatArrayPlugin * VMMaker-dtl.439 uuid: 2c8ef6e2-8460-4120-b973-009902597787 */var VM_PROXY_MAJOR = 1var VM_PROXY_MINOR = 11/*** Functions ***/function SIZEOF(obj) { return obj.pointers ? obj.pointers.length : obj.words ? obj.words.length : obj.bytes ? obj.bytes.length : typeof obj === "bigint" ? ((obj >= 0 ? obj : -obj).toString(16).length + 1) >>> 1 : 0 }function BYTESIZEOF(obj) { return obj.bytes ? obj.bytes.length : obj.words ? obj.words.length * 4 : typeof obj === "bigint" ? ((obj >= 0 ? obj : -obj).toString(16).length + 1) >>> 1 : 0 }function BYTESOF(obj) {	if (obj.bytes) return obj.bytes;	if (typeof obj === "bigint") {		let asString = (obj >= 0 ? obj : -obj).toString(16);		const length = (asString.length + 1) >>> 1;		asString = asString.padStart(length << 1, "0");		const bytes = new Uint8Array(length);		for (let i = length - 1, j = 0; i >= 0; i--)			bytes[i] = parseInt(asString.slice(j, j += 2), 16);		return bytes;	}}function CHECKEDINTEGER(val) {	return typeof val === "number" ? val : PrimitiveFailed.signal()}function CHECKEDBOOLEAN(val) {	return typeof val === "boolean"  ? val : PrimitiveFailed.signal()}function UBOR(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a | b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(a - 2147483648 | (b >= 2147483648 ? b - 2147483648 : b)) + 2147483648 :		(b >= 2147483648 ? (b - 2147483648 | a) + 2147483648 : b | a);	}	//unsigned bit orfunction UBORM(a, maskedB) {	a = a >>> 0;	return (a >= 2147483648 ? a - 2147483648 | maskedB : a | maskedB) + 2147483648;	}	//unsigned bit orfunction UBORS(a, smallB) {	if ((a | 0) === a)		return a | smallB;	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 | smallB) + 2147483648 : a | smallB;	}	//unsigned bit orfunction UBAND(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a & b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(b >= 2147483648 ? (b - 2147483648 & a - 2147483648) + 2147483648 : b & a - 2147483648) :		(b >= 2147483648 ? (b - 2147483648 & a) : b & a);	}	//unsigned bit andfunction UBANDM(a, maskedB) {	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 & maskedB) + 2147483648 : a & maskedB;	}	//unsigned bit andfunction UBANDS(a, smallB) {	if ((a | 0) === a)		return a & smallB;	a = a >>> 0;	return a >= 2147483648 ? a - 2147483648 & smallB : a & smallB;	}	//unsigned bit andfunction UBXOR(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a ^ b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(b >= 2147483648 ? b - 2147483648 ^ a - 2147483648 : (b ^ a - 2147483648) + 2147483648) :		(b >= 2147483648 ? (b - 2147483648 ^ a) + 2147483648 : b ^ a);	}	//unsigned bit xorfunction UBXORM(a, maskedB) {	a = a >>> 0;	return a >= 2147483648 ? a - 2147483648 ^ maskedB : (a ^ maskedB) + 2147483648;	}	//unsigned bit xorfunction UBXORS(a, smallB) {	if ((a | 0) === a)		return a ^ smallB;	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 ^ smallB) + 2147483648 : a ^ smallB;	}	//unsigned bit xorfunction MOD(a, b) {	return a - Math.trunc(a / b) * b >>> 0; }   // signed modulusfunction SHL(a, b) {	return b > 31 ? (a === 1 && b === 32 ? 4294967296 : 0) : a << b >>> 0 }function SHR(a, b) {	return b > 31 ? 0 : a >>> b }function SHIFT(a, b) {	b = b | 0;	return b < 0 ? (b < -31 ? 0 : a >>> -b ) : (b > 31 ? (a === 1 && b === 32 ? 4294967296 : 0) : a << b >>> 0) }function PTR_ADD(p, n) { return new Int32Array(p.buffer, p.byteOffset + n * 4); }function CPTR_ADD(p, n) { return new Int8Array(p.buffer, p.byteOffset + n); }function FPTR_ADD(p, n) { return new Float32Array(p.buffer, p.byteOffset + n * 4); }function PTR_SUB(p, n) { return new Int32Array(p.buffer, p.byteOffset - n * 4); }function CPTR_SUB(p, n) { return new Int8Array(p.buffer, p.byteOffset - n); }function FPTR_SUB(p, n) { return new Float32Array(p.buffer, p.byteOffset - n * 4); }function PTR_PTRSUB(p1, p2) { return p1.buffer === p2.buffer ? p1.byteOffset - p2.byteOffset : 0 }/*** Variables ***/globalThis.FloatArrayPlugin = {/*	Primitive. Add the receiver and the argument, both FloatArrays and store the result into the receiver. */primitiveAddFloatArray(arg) {	let argPtr;	let i;	let length;	let rcvrPtr;	((typeof arg === "number") ? PrimitiveFailed.signal() : arg);	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(arg.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(arg);	if (length !== SIZEOF(this)) throw Object.create(PrimitiveFailed).setPayload(1);	;	rcvrPtr = this.wordsAsFloat32Array();	argPtr = arg.wordsAsFloat32Array();	for (i = 0; i < length; i++) {		rcvrPtr[i] = (rcvrPtr[i] + argPtr[i]);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Add the argument, a scalar value to the receiver, a FloatArray */primitiveAddScalar(value) {	let i;	let length;	let rcvrPtr;	((typeof value === "number" && (value | 0) !== value && !Number.isSafeInteger(value) || value._class() === SmalltalkGlobals._Float) ? value.valueOf() : PrimitiveFailed.signal());	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(this);	rcvrPtr = this.wordsAsFloat32Array();	for (i = 0; i < length; i++) {		rcvrPtr[i] = (rcvrPtr[i] + value);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveAt(index) {	let floatPtr;	let floatValue;	((typeof index === "number") ? index : PrimitiveFailed.signal());	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	if (!((index > 0) && (index <= SIZEOF(this)))) throw Object.create(PrimitiveFailed).setPayload(1);	;	floatPtr = this.wordsAsFloat32Array();	floatValue = floatPtr[index - 1];	throw Object.create(PrimitiveReturn).setPayload(typeof floatValue.valueOf() !== "number" ? PrimitiveFailed.signal() : ((floatValue.valueOf() | 0 === floatValue.valueOf()) || Number.isSafeInteger(floatValue) ? new Float(floatValue) : floatValue.valueOf()));}, primitiveAtPut(index, value) {	let floatPtr;	let floatValue;	floatValue = (typeof value === "number") ? value : ((typeof value === "number" && (value | 0) !== value && !Number.isSafeInteger(value) || value._class() === SmalltalkGlobals._Float) ? value.valueOf() : PrimitiveFailed.signal());	((typeof index === "number") ? index : PrimitiveFailed.signal());	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	if (!((index > 0) && (index <= SIZEOF(this)))) throw Object.create(PrimitiveFailed).setPayload(1);	;	floatPtr = this.wordsAsFloat32Array();	floatPtr[index - 1] = floatValue;	throw Object.create(PrimitiveReturn).setPayload(value);	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Add the receiver and the argument, both FloatArrays and store the result into the receiver. */primitiveDivFloatArray(arg) {	let argPtr;	let i;	let i1;	let length;	let rcvrPtr;	((typeof arg === "number") ? PrimitiveFailed.signal() : arg);	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(arg.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(arg);	if (length !== SIZEOF(this)) throw Object.create(PrimitiveFailed).setPayload(1);	;	rcvrPtr = this.wordsAsFloat32Array();	/* Check if any of the argument's values is zero */	argPtr = arg.wordsAsFloat32Array();	for (i = 0; i < length; i++) {		if (argPtr[i] === 0) {			throw Object.create(PrimitiveFailed).setPayload(1);		}	}	for (i1 = 0; i1 < length; i1++) {		rcvrPtr[i1] = (rcvrPtr[i1] / argPtr[i1]);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Add the argument, a scalar value to the receiver, a FloatArray */primitiveDivScalar(value) {	let i;	let inverse;	let length;	let rcvrPtr;	((typeof value === "number" && (value | 0) !== value && !Number.isSafeInteger(value) || value._class() === SmalltalkGlobals._Float) ? value.valueOf() : PrimitiveFailed.signal());	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (value === 0.0) {		throw Object.create(PrimitiveFailed).setPayload(1);	}	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(this);	rcvrPtr = this.wordsAsFloat32Array();	inverse = 1.0 / value;	for (i = 0; i < length; i++) {		rcvrPtr[i] = (rcvrPtr[i] * inverse);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Compute the dot product of the receiver and the argument.	The dot product is defined as the sum of the products of the individual elements. */primitiveDotProduct(arg) {	let argPtr;	let i;	let length;	let rcvrPtr;	let result;	((typeof arg === "number") ? PrimitiveFailed.signal() : arg);	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(arg.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(arg);	if (length !== SIZEOF(this)) throw Object.create(PrimitiveFailed).setPayload(1);	;	rcvrPtr = this.wordsAsFloat32Array();	argPtr = arg.wordsAsFloat32Array();	result = 0.0;	for (i = 0; i < length; i++) {		result += rcvrPtr[i] * argPtr[i];	}	throw Object.create(PrimitiveReturn).setPayload(typeof result.valueOf() !== "number" ? PrimitiveFailed.signal() : ((result.valueOf() | 0 === result.valueOf()) || Number.isSafeInteger(result) ? new Float(result) : result.valueOf()));}, primitiveEqual(arg) {	let argPtr;	let i;	let length;	let rcvrPtr;	((typeof arg === "number") ? PrimitiveFailed.signal() : arg);	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(arg.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(arg);	if (length !== SIZEOF(this)) {		throw Object.create(PrimitiveReturn).setPayload(CHECKEDBOOLEAN(false));	}	rcvrPtr = this.wordsAsFloat32Array();	argPtr = arg.wordsAsFloat32Array();	for (i = 0; i < length; i++) {		if (rcvrPtr[i] !== argPtr[i]) {			throw Object.create(PrimitiveReturn).setPayload(CHECKEDBOOLEAN(false));		}	}	throw Object.create(PrimitiveReturn).setPayload(CHECKEDBOOLEAN(true));}, primitiveHashArray() {	let i;	let length;	let rcvrPtr;	let result;	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(this);	rcvrPtr = this.wordsAsInt32Array();	result = 0;	for (i = 0; i < length; i++) {		result += rcvrPtr[i];	}	throw Object.create(PrimitiveReturn).setPayload(CHECKEDINTEGER((UBANDS(result, 536870911))));}, /*	Primitive. Compute the length of the argument (sqrt of sum of component squares). */primitiveLength() {	let i;	let length;	let rcvrPtr;	let result;	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(this);	if (false) throw Object.create(PrimitiveFailed).setPayload(1);	rcvrPtr = this.wordsAsFloat32Array();	result = 0.0;	for (i = 0; i < length; i++) {		result += rcvrPtr[i] * rcvrPtr[i];	}	result = Math.sqrt(result);	throw Object.create(PrimitiveReturn).setPayload(typeof result.valueOf() !== "number" ? PrimitiveFailed.signal() : ((result.valueOf() | 0 === result.valueOf()) || Number.isSafeInteger(result) ? new Float(result) : result.valueOf()));}, /*	Primitive. Add the receiver and the argument, both FloatArrays and store the result into the receiver. */primitiveMulFloatArray(arg) {	let argPtr;	let i;	let length;	let rcvrPtr;	((typeof arg === "number") ? PrimitiveFailed.signal() : arg);	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(arg.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(arg);	if (length !== SIZEOF(this)) throw Object.create(PrimitiveFailed).setPayload(1);	;	rcvrPtr = this.wordsAsFloat32Array();	argPtr = arg.wordsAsFloat32Array();	for (i = 0; i < length; i++) {		rcvrPtr[i] = (rcvrPtr[i] * argPtr[i]);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Add the argument, a scalar value to the receiver, a FloatArray */primitiveMulScalar(value) {	let i;	let length;	let rcvrPtr;	((typeof value === "number" && (value | 0) !== value && !Number.isSafeInteger(value) || value._class() === SmalltalkGlobals._Float) ? value.valueOf() : PrimitiveFailed.signal());	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(this);	rcvrPtr = this.wordsAsFloat32Array();	for (i = 0; i < length; i++) {		rcvrPtr[i] = (rcvrPtr[i] * value);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Normalize the argument (A FloatArray) in place. */primitiveNormalize() {	let i;	let i1;	let len;	let length;	let rcvrPtr;	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(this);	if (false) throw Object.create(PrimitiveFailed).setPayload(1);	rcvrPtr = this.wordsAsFloat32Array();	len = 0.0;	for (i = 0; i < length; i++) {		len += rcvrPtr[i] * rcvrPtr[i];	}	if (!(len > 0.0)) throw Object.create(PrimitiveFailed).setPayload(1);	;	len = Math.sqrt(len);	for (i1 = 0; i1 < length; i1++) {		rcvrPtr[i1] = (rcvrPtr[i1] / len);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Add the receiver and the argument, both FloatArrays and store the result into the receiver. */primitiveSubFloatArray(arg) {	let argPtr;	let i;	let length;	let rcvrPtr;	((typeof arg === "number") ? PrimitiveFailed.signal() : arg);	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(arg.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(arg);	if (length !== SIZEOF(this)) throw Object.create(PrimitiveFailed).setPayload(1);	;	rcvrPtr = this.wordsAsFloat32Array();	argPtr = arg.wordsAsFloat32Array();	for (i = 0; i < length; i++) {		rcvrPtr[i] = (rcvrPtr[i] - argPtr[i]);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Add the argument, a scalar value to the receiver, a FloatArray */primitiveSubScalar(value) {	let i;	let length;	let rcvrPtr;	((typeof value === "number" && (value | 0) !== value && !Number.isSafeInteger(value) || value._class() === SmalltalkGlobals._Float) ? value.valueOf() : PrimitiveFailed.signal());	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(this);	rcvrPtr = this.wordsAsFloat32Array();	for (i = 0; i < length; i++) {		rcvrPtr[i] = (rcvrPtr[i] - value);	}	throw Object.create(PrimitiveReturn).setPayload(this);}, /*	Primitive. Find the sum of each float in the receiver, a FloatArray, and stash the result into the argument Float. */primitiveSum() {	let i;	let length;	let rcvrPtr;	let sum;	((typeof this === "number") ? PrimitiveFailed.signal() : this);	;	if (!(this.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);	;	length = SIZEOF(this);	rcvrPtr = this.wordsAsFloat32Array();	sum = 0.0;	for (i = 0; i < length; i++) {		sum += rcvrPtr[i];	}	throw Object.create(PrimitiveReturn).setPayload(typeof sum.valueOf() !== "number" ? PrimitiveFailed.signal() : ((sum.valueOf() | 0 === sum.valueOf()) || Number.isSafeInteger(sum) ? new Float(sum) : sum.valueOf()));}, }