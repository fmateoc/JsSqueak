/* Smalltalk from Squeak4.5 with VMMaker 4.20.5 translated as JavaScript source on 26 July 2023 12:02 am *//* Automatically generated by	JSPluginCodeGenerator * VMMakerJS-dtl.18 uuid: 544d97d2-2811-46b7-a653-5c1776f146a4   from	KedamaPlugin Kedama-Plugins-yo.1 uuid: 3fc7d691-0149-ba4d-a339-5d27cd44a2f8 */var VM_PROXY_MAJOR = 1var VM_PROXY_MINOR = 11/*** Functions ***/function SIZEOF(obj) { return obj.pointers ? obj.pointers.length : obj.words ? obj.words.length : obj.bytes ? obj.bytes.length : typeof obj === "bigint" ? ((obj >= 0 ? obj : -obj).toString(16).length + 1) >>> 1 : 0 }function BYTESIZEOF(obj) { return obj.bytes ? obj.bytes.length : obj.words ? obj.words.length * 4 : typeof obj === "bigint" ? ((obj >= 0 ? obj : -obj).toString(16).length + 1) >>> 1 : 0 }function BYTESOF(obj) {	if (obj.bytes) return obj.bytes;	if (typeof obj === "bigint") {		let asString = (obj >= 0 ? obj : -obj).toString(16);		const length = (asString.length + 1) >>> 1;		asString = asString.padStart(length << 1, "0");		const bytes = new Uint8Array(length);		for (let i = length - 1, j = 0; i >= 0; i--)			bytes[i] = parseInt(asString.slice(j, j += 2), 16);		return bytes;	}}function CHECKEDINTEGER(val) {	return typeof val === "number" ? val : PrimitiveFailed.signal()}function CHECKEDBOOLEAN(val) {	return typeof val === "boolean"  ? val : PrimitiveFailed.signal()}function UBOR(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a | b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(a - 2147483648 | (b >= 2147483648 ? b - 2147483648 : b)) + 2147483648 :		(b >= 2147483648 ? (b - 2147483648 | a) + 2147483648 : b | a);	}	//unsigned bit orfunction UBORM(a, maskedB) {	a = a >>> 0;	return (a >= 2147483648 ? a - 2147483648 | maskedB : a | maskedB) + 2147483648;	}	//unsigned bit orfunction UBORS(a, smallB) {	if ((a | 0) === a)		return a | smallB;	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 | smallB) + 2147483648 : a | smallB;	}	//unsigned bit orfunction UBAND(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a & b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(b >= 2147483648 ? (b - 2147483648 & a - 2147483648) + 2147483648 : b & a - 2147483648) :		(b >= 2147483648 ? (b - 2147483648 & a) : b & a);	}	//unsigned bit andfunction UBANDM(a, maskedB) {	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 & maskedB) + 2147483648 : a & maskedB;	}	//unsigned bit andfunction UBANDS(a, smallB) {	if ((a | 0) === a)		return a & smallB;	a = a >>> 0;	return a >= 2147483648 ? a - 2147483648 & smallB : a & smallB;	}	//unsigned bit andfunction UBXOR(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a ^ b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(b >= 2147483648 ? b - 2147483648 ^ a - 2147483648 : (b ^ a - 2147483648) + 2147483648) :		(b >= 2147483648 ? (b - 2147483648 ^ a) + 2147483648 : b ^ a);	}	//unsigned bit xorfunction UBXORM(a, maskedB) {	a = a >>> 0;	return a >= 2147483648 ? a - 2147483648 ^ maskedB : (a ^ maskedB) + 2147483648;	}	//unsigned bit xorfunction UBXORS(a, smallB) {	if ((a | 0) === a)		return a ^ smallB;	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 ^ smallB) + 2147483648 : a ^ smallB;	}	//unsigned bit xorfunction MOD(a, b) {	return a - Math.trunc(a / b) * b >>> 0; }   // signed modulusfunction SHL(a, b) {	return b > 31 ? (a === 1 && b === 32 ? 4294967296 : 0) : a << b >>> 0 }function SHR(a, b) {	return b > 31 ? 0 : a >>> b }function SHIFT(a, b) {	b = b | 0;	return b < 0 ? (b < -31 ? 0 : a >>> -b ) : (b > 31 ? (a === 1 && b === 32 ? 4294967296 : 0) : a << b >>> 0) }function PTR_ADD(p, n) { return new Int32Array(p.buffer, p.byteOffset + n * 4); }function CPTR_ADD(p, n) { return new Int8Array(p.buffer, p.byteOffset + n); }function FPTR_ADD(p, n) { return new Float32Array(p.buffer, p.byteOffset + n * 4); }function PTR_SUB(p, n) { return new Int32Array(p.buffer, p.byteOffset - n * 4); }function CPTR_SUB(p, n) { return new Int8Array(p.buffer, p.byteOffset - n); }function FPTR_SUB(p, n) { return new Float32Array(p.buffer, p.byteOffset - n * 4); }function PTR_PTRSUB(p1, p2) { return p1.buffer === p2.buffer ? p1.byteOffset - p2.byteOffset : 0 }/*** Variables ***/let kedamaRandomSeed = 0;let randA = 0;let randM = 0;let randQ = 0;let randR = 0;globalThis.KedamaPlugin = {degreesFromXy(x, y) {	let tanVal;	let theta;	if (x === 0.0) {		return (y >= 0.0) ? 90.0 : 270.0;	} else {		tanVal = y / x;		theta = Math.atan(tanVal);		return (x >= 0.0) ? ((y >= 0.0) ? (theta / 0.0174532925199433) : (360.0 + (theta / 0.0174532925199433))) : (180.0 + (theta / 0.0174532925199433));	}}, degreesToRadians(degrees) {	let deg;	let headingRadians;	let q;	deg = 90.0 - degrees;	q = deg / 360.0|0;	if (deg < 0.0) {		--q;	}	headingRadians = (deg - (q * 360.0)) * 0.0174532925199433;	return headingRadians;}, drawTurtlesInArray(destOop, destWidth, destHeight, xOop, yOop, colorOop, visibleOop) {	let bitsIndex;	let colorArray;	let destBits;	let i;	let size;	let visible;	let visibleArray;	let x;	let xArray;	let y;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let zzzTemp4;	let zzzTemp5;	let zzzTemp6;	let zzzTemp7;	let zzzTemp8;	let zzzTemp9;	((typeof destHeight === "number") ? destHeight : PrimitiveFailed.signal());	((typeof destWidth === "number") ? destWidth : PrimitiveFailed.signal());	if ((destOop.storageType === "words")) {	if ((xOop.storageType === "words")) {		if ((yOop.storageType === "words")) {			if ((colorOop.storageType === "words")) {				if ((visibleOop.storageType === "bytes")) {					if ((destHeight * destWidth) !== SIZEOF(destOop)) {						throw Object.create(PrimitiveFailed).setPayload(1);						zzzTemp5 = null;					} else {						size = SIZEOF(xOop);						if (SIZEOF(yOop) !== size) {							throw Object.create(PrimitiveFailed).setPayload(1);							zzzTemp6 = null;						} else {							if (SIZEOF(colorOop) !== size) {								throw Object.create(PrimitiveFailed).setPayload(1);								zzzTemp7 = null;							} else {								if (SIZEOF(visibleOop) !== size) {									throw Object.create(PrimitiveFailed).setPayload(1);									zzzTemp8 = null;								} else {									xArray = xOop.wordsAsFloat32Array();									yArray = yOop.wordsAsFloat32Array();									colorArray = colorOop.words;									visibleArray = BYTESOF(visibleOop);									destBits = destOop.words;									for (i = 0; i < size; i++) {										x = (xArray[i]|0);										;										y = (yArray[i]|0);										;										visible = visibleArray[i];										if ((visible !== 0) && (((x >= 0) && (y >= 0)) && ((x < destWidth) && (y < destHeight)))) {											bitsIndex = (y * destWidth) + x;											destBits[bitsIndex] = colorArray[i];										}									}																	zzzTemp9 = this;									zzzTemp8 = zzzTemp9;								}								zzzTemp7 = zzzTemp8;							}							zzzTemp6 = zzzTemp7;						}						zzzTemp5 = zzzTemp6;					}					zzzTemp4 = zzzTemp5;				} else {					throw Object.create(PrimitiveFailed).setPayload(1);					zzzTemp4 = null;				}				zzzTemp3 = zzzTemp4;			} else {				throw Object.create(PrimitiveFailed).setPayload(1);				zzzTemp3 = null;			}			zzzTemp2 = zzzTemp3;		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, getHeadingArrayInto(headingOop, resultOop) {	let heading;	let headingArray;	let i;	let resultArray;	let size;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	if ((headingOop.storageType === "words")) {	if ((resultOop.storageType === "words")) {		size = SIZEOF(headingOop);		if (SIZEOF(resultOop) !== size) {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		} else {			headingArray = headingOop.wordsAsFloat32Array();			resultArray = resultOop.wordsAsFloat32Array();			for (i = 0; i < size; i++) {				heading = headingArray[i];				heading = heading / 0.0174532925199433;				heading = 90.0 - heading;				if (!(heading > 0.0)) {					heading += 360.0;				}				resultArray[i] = heading;			}					zzzTemp3 = this;			zzzTemp2 = zzzTemp3;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, getScalarHeading(index, headingOop) {	let heading;	let headingArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let deg;	let degrees;	((typeof index === "number") ? index : PrimitiveFailed.signal());	if ((headingOop.storageType === "words")) {	if (SIZEOF(headingOop) < index) {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	} else {		headingArray = headingOop.wordsAsFloat32Array();		heading = headingArray[index - 1];		/* begin radiansToDegrees: */		degrees = heading / 0.0174532925199433;		deg = 90.0 - degrees;		if (!(deg > 0.0)) {			deg += 360.0;		}		heading = deg;		/* end radiansToDegrees: */			throw Object.create(PrimitiveReturn).setPayload(typeof heading.valueOf() !== "number" ? PrimitiveFailed.signal() : ((heading.valueOf() | 0 === heading.valueOf()) || Number.isSafeInteger(heading) ? new Float(heading) : heading.valueOf()));	zzzTemp2 = this;		zzzTemp1 = zzzTemp2;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, initialiseModule() {	kedamaRandomSeed = 17;	/*  magic constant =      16807  */	randA = 16807;	/*  magic constant = 2147483647  */	randM = 2147483647;	randQ = Math.trunc(randM / randA);	randR = MOD(randM, randA);}, kedamaRandom2(range) {	let hi;	let lo;	let r;	let v;	let val;	r = (range < 0) ? (0 - range) : range;	hi = Math.trunc(kedamaRandomSeed / randQ);	lo = MOD(kedamaRandomSeed, randQ);	kedamaRandomSeed = (randA * lo) - (randR * hi);	v = UBANDS(kedamaRandomSeed, 65535);	val = (v * (r + 1)) >>> 16;	return (range < 0) ? (0 - val) : val;}, kedamaSetRandomSeed(seed) {	((typeof seed === "number") ? seed : PrimitiveFailed.signal());	kedamaRandomSeed = UBANDS(seed, 65536);}, makeMask(dataBits, maskBits, pixel, shiftAmount) {	let alpha;	let dOrigin;	let data;	let dataSize;	let highMask;	let i;	let mOrigin;	let maskSize;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	((typeof shiftAmount === "number") ? shiftAmount : PrimitiveFailed.signal());	((typeof pixel === "number") ? pixel : PrimitiveFailed.signal());	dataSize = SIZEOF(dataBits);maskSize = SIZEOF(maskBits);if (dataSize === maskSize) {	if (shiftAmount < -32) {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	} else {		if (shiftAmount > 8) {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		} else {			dOrigin = dataBits.words;			mOrigin = maskBits.words;			highMask = 4278190080;			for (i = 0; i < dataSize; i++) {				data = dOrigin[i];				alpha = SHIFT(data, shiftAmount);				if (alpha > 255) {					alpha = 255;				}				if (alpha < 0) {					alpha = 0;				}				mOrigin[i] = (UBOR((UBAND((alpha << 24 >>> 0), highMask)), pixel));			}			zzzTemp2 = this;		}		zzzTemp1 = zzzTemp2;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, makeMaskLog(dataBits, maskBits, pixel, maxOop) {	let alpha;	let dOrigin;	let data;	let dataSize;	let highMask;	let i;	let mOrigin;	let maskSize;	let max;	let maxFirst;	let maxLog;	let zzzTemp;	let zzzTemp1;	((typeof pixel === "number") ? pixel : PrimitiveFailed.signal());	maxFirst = maxOop.words;max = maxFirst[0];maxLog = Math.log(max);dataSize = SIZEOF(dataBits);maskSize = SIZEOF(maskBits);if (dataSize === maskSize) {dOrigin = dataBits.words;mOrigin = maskBits.words;highMask = 4278190080;for (i = 0; i < dataSize; i++) {	data = dOrigin[i];	alpha = (data === 0) ? 0 : (((255.0 / maxLog) * Math.log(data)) | 0);	if (alpha > 255) {		alpha = 255;	}	mOrigin[i] = (UBOR((UBAND((alpha << 24 >>> 0), highMask)), pixel));}zzzTemp1 = this;} else {throw Object.create(PrimitiveFailed).setPayload(1);zzzTemp1 = null;}zzzTemp = zzzTemp1;return zzzTemp;}, makeTurtlesMap(mapOop, whoOop, xOop, yOop, width, height) {	let index;	let index1;	let map;	let mapIndex;	let size;	let whoArray;	let x;	let xArray;	let y;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let zzzTemp4;	let zzzTemp5;	let zzzTemp6;	((typeof height === "number") ? height : PrimitiveFailed.signal());	((typeof width === "number") ? width : PrimitiveFailed.signal());	if ((yOop.storageType === "words")) {		if ((xOop.storageType === "words")) {			if ((whoOop.storageType === "words")) {				if ((mapOop.storageType === "words")) {					size = SIZEOF(whoOop);					if (SIZEOF(xOop) !== size) {						throw Object.create(PrimitiveFailed).setPayload(1);						zzzTemp3 = null;					} else {						if (SIZEOF(yOop) !== size) {							throw Object.create(PrimitiveFailed).setPayload(1);							zzzTemp4 = null;						} else {							if (SIZEOF(mapOop) !== (height * width)) {								throw Object.create(PrimitiveFailed).setPayload(1);								zzzTemp5 = null;							} else {								xArray = xOop.wordsAsFloat32Array();								yArray = yOop.wordsAsFloat32Array();								whoArray = whoOop.words;								map = mapOop.words;								const indexLimiT = height * width;								for (index = 0; index < indexLimiT; index++) {									map[index] = 0;								}								for (index1 = 0; index1 < size; index1++) {									x = xArray[index1];									y = yArray[index1];									mapIndex = (width * y) + x;									if ((mapIndex >= 0) && (mapIndex < (height * width))) {										map[mapIndex] = whoArray[index1];									}								}															zzzTemp6 = this;								zzzTemp5 = zzzTemp6;							}							zzzTemp4 = zzzTemp5;						}						zzzTemp3 = zzzTemp4;					}					zzzTemp2 = zzzTemp3;				} else {					throw Object.create(PrimitiveFailed).setPayload(1);					zzzTemp2 = null;				}				zzzTemp1 = zzzTemp2;			} else {				throw Object.create(PrimitiveFailed).setPayload(1);				zzzTemp1 = null;			}			zzzTemp = zzzTemp1;		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp = null;		}		return zzzTemp;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		return null;	}}, primPixelAtXY(bitsOop, xPos, yPos, width, height) {	let bits;	let index;	let ret;	let x;	let y;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	((typeof height === "number") ? height : PrimitiveFailed.signal());	((typeof width === "number") ? width : PrimitiveFailed.signal());	((typeof yPos === "number" && (yPos | 0) !== yPos && !Number.isSafeInteger(yPos) || yPos._class() === SmalltalkGlobals._Float) ? yPos.valueOf() : PrimitiveFailed.signal());	((typeof xPos === "number" && (xPos | 0) !== xPos && !Number.isSafeInteger(xPos) || xPos._class() === SmalltalkGlobals._Float) ? xPos.valueOf() : PrimitiveFailed.signal());	if ((bitsOop.storageType === "words")) {	if (SIZEOF(bitsOop) !== (height * width)) {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	} else {		x = xPos|0;		y = yPos|0;		bits = bitsOop.words;		if ((((x >= 0) && (x < width)) && (y >= 0)) && (y < height)) {			index = (y * width) + x;			ret = bits[index];		} else {			ret = 0;		}			throw Object.create(PrimitiveReturn).setPayload(((typeof ret === "number") ? ret : PrimitiveFailed.signal()));	zzzTemp2 = this;		zzzTemp1 = zzzTemp2;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primPixelAtXYPut(bitsOop, xPos, yPos, value, width, height) {	let bits;	let index;	let v;	let x;	let y;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	((typeof height === "number") ? height : PrimitiveFailed.signal());	((typeof width === "number") ? width : PrimitiveFailed.signal());	((typeof value === "number") ? value : PrimitiveFailed.signal());	((typeof yPos === "number" && (yPos | 0) !== yPos && !Number.isSafeInteger(yPos) || yPos._class() === SmalltalkGlobals._Float) ? yPos.valueOf() : PrimitiveFailed.signal());	((typeof xPos === "number" && (xPos | 0) !== xPos && !Number.isSafeInteger(xPos) || xPos._class() === SmalltalkGlobals._Float) ? xPos.valueOf() : PrimitiveFailed.signal());	if ((bitsOop.storageType === "words")) {	if (SIZEOF(bitsOop) !== (height * width)) {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	} else {		x = xPos|0;		y = yPos|0;		v = value;		if (v > 1073741823) {			v = 1073741823;		}		if (v < 0) {			v = 0;		}		bits = bitsOop.words;		if ((((x >= 0) && (x < width)) && (y >= 0)) && (y < height)) {			index = (y * width) + x;			bits[index] = v;		}			zzzTemp2 = this;		zzzTemp1 = zzzTemp2;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primPixelsAtXY(xArrayOop, yArrayOop, bitsOop, bitsWidth, bitsHeight, destWordsOop) {	let bits;	let bitsIndex;	let destWords;	let i;	let size;	let x;	let xArray;	let y;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let zzzTemp4;	let zzzTemp5;	let zzzTemp6;	let zzzTemp7;	((typeof bitsHeight === "number") ? bitsHeight : PrimitiveFailed.signal());	((typeof bitsWidth === "number") ? bitsWidth : PrimitiveFailed.signal());	if ((destWordsOop.storageType === "words")) {	if ((xArrayOop.storageType === "words")) {		if ((yArrayOop.storageType === "words")) {			if ((bitsOop.storageType === "words")) {				if ((bitsHeight * bitsWidth) !== SIZEOF(bitsOop)) {					throw Object.create(PrimitiveFailed).setPayload(1);					zzzTemp4 = null;				} else {					size = SIZEOF(xArrayOop);					if (SIZEOF(yArrayOop) !== size) {						throw Object.create(PrimitiveFailed).setPayload(1);						zzzTemp5 = null;					} else {						if (SIZEOF(destWordsOop) !== size) {							throw Object.create(PrimitiveFailed).setPayload(1);							zzzTemp6 = null;						} else {							xArray = xArrayOop.wordsAsFloat32Array();							yArray = yArrayOop.wordsAsFloat32Array();							destWords = destWordsOop.words;							bits = bitsOop.words;							for (i = 0; i < size; i++) {								x = (xArray[i]|0);								;								y = (yArray[i]|0);								;								if (((x >= 0) && (y >= 0)) && ((x < bitsWidth) && (y < bitsHeight))) {									bitsIndex = (y * bitsWidth) + x;									destWords[i] = bits[bitsIndex];								}							}													zzzTemp7 = this;							zzzTemp6 = zzzTemp7;						}						zzzTemp5 = zzzTemp6;					}					zzzTemp4 = zzzTemp5;				}				zzzTemp3 = zzzTemp4;			} else {				throw Object.create(PrimitiveFailed).setPayload(1);				zzzTemp3 = null;			}			zzzTemp2 = zzzTemp3;		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primScalarForward(index, xOop, yOop, headingOop, val, destWidth, destHeight, leftEdgeMode, rightEdgeMode, topEdgeMode, bottomEdgeMode) {	let dist;	let headingArray;	let i;	let newX;	let newY;	let size;	let xArray;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let zzzTemp4;	let zzzTemp5;	let headingRadians;	let newX1;	let newY1;	((typeof bottomEdgeMode === "number") ? bottomEdgeMode : PrimitiveFailed.signal());	((typeof topEdgeMode === "number") ? topEdgeMode : PrimitiveFailed.signal());	((typeof rightEdgeMode === "number") ? rightEdgeMode : PrimitiveFailed.signal());	((typeof leftEdgeMode === "number") ? leftEdgeMode : PrimitiveFailed.signal());	((typeof destHeight === "number" && (destHeight | 0) !== destHeight && !Number.isSafeInteger(destHeight) || destHeight._class() === SmalltalkGlobals._Float) ? destHeight.valueOf() : PrimitiveFailed.signal());	((typeof destWidth === "number" && (destWidth | 0) !== destWidth && !Number.isSafeInteger(destWidth) || destWidth._class() === SmalltalkGlobals._Float) ? destWidth.valueOf() : PrimitiveFailed.signal());	((typeof val === "number" && (val | 0) !== val && !Number.isSafeInteger(val) || val._class() === SmalltalkGlobals._Float) ? val.valueOf() : PrimitiveFailed.signal());	((typeof index === "number") ? index : PrimitiveFailed.signal());	if ((xOop.storageType === "words")) {	if ((yOop.storageType === "words")) {		if ((headingOop.storageType === "words")) {			size = SIZEOF(xOop);			if (SIZEOF(yOop) !== size) {				throw Object.create(PrimitiveFailed).setPayload(1);				zzzTemp3 = null;			} else {				if (SIZEOF(headingOop) !== size) {					throw Object.create(PrimitiveFailed).setPayload(1);					zzzTemp4 = null;				} else {					xArray = xOop.wordsAsFloat32Array();					yArray = yOop.wordsAsFloat32Array();					headingArray = headingOop.wordsAsFloat32Array();					dist = val;					i = index - 1;					newX = xArray[i] + (dist * Math.cos(headingArray[i]));					newY = yArray[i] - (dist * Math.sin(headingArray[i]));					/* begin scalarXAt:xArray:headingArray:value:destWidth:leftEdgeMode:rightEdgeMode: */					newX1 = newX;					if (newX1 < 0.0) {												switch (leftEdgeMode) {						case 1:														/* wrap */							newX1 += destWidth;							break;						case 2:														/* stick */							newX1 = 0.0;							break;						case 3:														/* bounce */							newX1 = 0.0 - newX1;							headingRadians = headingArray[i];							if (headingRadians < 3.141592653589793) {								headingArray[i] = (3.141592653589793 - headingRadians);							} else {								headingArray[i] = (9.42477796076938 - headingRadians);							}							break;						default:														null;						}					}					if (newX1 >= destWidth) {												switch (rightEdgeMode) {						case 1:														newX1 -= destWidth;							break;						case 2:														newX1 = destWidth - 1.0e-6;							break;						case 3:														newX1 = (destWidth - 1.0e-6) - (newX1 - destWidth);							headingRadians = headingArray[i];							if (headingRadians < 3.141592653589793) {								headingArray[i] = (3.141592653589793 - headingRadians);							} else {								headingArray[i] = (9.42477796076938 - headingRadians);							}							break;						default:														null;						}					}					xArray[i] = newX1;					/* end scalarXAt:xArray:headingArray:value:destWidth:leftEdgeMode:rightEdgeMode: */					/* begin scalarYAt:yArray:headingArray:value:destHeight:topEdgeMode:bottomEdgeMode: */					newY1 = newY;					if (newY1 < 0.0) {												switch (topEdgeMode) {						case 1:														/* wrap */							newY1 += destHeight;							break;						case 2:														/* stick */							newY1 = 0.0;							break;						case 3:														/* bounce */							newY1 = 0.0 - newY1;							headingArray[i] = (6.283185307179586 - headingArray[i]);							break;						default:														null;						}					}					if (newY1 >= destHeight) {												switch (bottomEdgeMode) {						case 1:														newY1 -= destHeight;							break;						case 2:														newY1 = destHeight - 1.0e-6;							break;						case 3:														newY1 = (destHeight - 1.0e-6) - (newY1 - destHeight);							headingArray[i] = (6.283185307179586 - headingArray[i]);							break;						default:														null;						}					}					yArray[i] = newY1;					/* end scalarYAt:yArray:headingArray:value:destHeight:topEdgeMode:bottomEdgeMode: */									zzzTemp5 = this;					zzzTemp4 = zzzTemp5;				}				zzzTemp3 = zzzTemp4;			}			zzzTemp2 = zzzTemp3;		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primSetPixelsAtXY(xArrayOop, yArrayOop, bitsOop, bitsWidth, bitsHeight, valueOop) {	let bits;	let bitsIndex;	let i;	let intValue;	let isValueInt;	let size;	let value;	let wordsValue;	let x;	let xArray;	let y;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let zzzTemp4;	let zzzTemp5;	((typeof bitsHeight === "number") ? bitsHeight : PrimitiveFailed.signal());	((typeof bitsWidth === "number") ? bitsWidth : PrimitiveFailed.signal());	if ((xArrayOop.storageType === "words")) {	if ((yArrayOop.storageType === "words")) {		if ((bitsOop.storageType === "words")) {			if ((bitsHeight * bitsWidth) !== SIZEOF(bitsOop)) {				throw Object.create(PrimitiveFailed).setPayload(1);				zzzTemp3 = null;			} else {				size = SIZEOF(xArrayOop);				if (SIZEOF(yArrayOop) !== size) {					throw Object.create(PrimitiveFailed).setPayload(1);					zzzTemp4 = null;				} else {					isValueInt = (typeof valueOop === "number");					if (isValueInt) {						intValue = valueOop;					}					if (!isValueInt) {						if ((valueOop._class() === SmalltalkGlobals._WordArray)) {							if (SIZEOF(valueOop) !== size) {								throw Object.create(PrimitiveFailed).setPayload(1);								return null;							}						} else {							throw Object.create(PrimitiveFailed).setPayload(1);							return null;						}					}					xArray = xArrayOop.wordsAsFloat32Array();					yArray = yArrayOop.wordsAsFloat32Array();					if (!isValueInt) {						wordsValue = valueOop.words;					}					bits = bitsOop.words;					if (isValueInt) {						value = intValue;					}					for (i = 0; i < size; i++) {						x = (xArray[i]|0);						;						y = (yArray[i]|0);						;						if (((x >= 0) && (y >= 0)) && ((x < bitsWidth) && (y < bitsHeight))) {							bitsIndex = (y * bitsWidth) + x;							if (!isValueInt) {								value = wordsValue[i];							}							bits[bitsIndex] = value;						}					}									zzzTemp5 = this;					zzzTemp4 = zzzTemp5;				}				zzzTemp3 = zzzTemp4;			}			zzzTemp2 = zzzTemp3;		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primTurtlesForward(xOop, yOop, headingOop, valOop, destWidth, destHeight, leftEdgeMode, rightEdgeMode, topEdgeMode, bottomEdgeMode) {	let dist;	let headingArray;	let i;	let isValVector;	let newX;	let newY;	let size;	let val;	let valArray;	let xArray;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let zzzTemp4;	let zzzTemp5;	let headingRadians;	let newX1;	let newY1;	((typeof bottomEdgeMode === "number") ? bottomEdgeMode : PrimitiveFailed.signal());	((typeof topEdgeMode === "number") ? topEdgeMode : PrimitiveFailed.signal());	((typeof rightEdgeMode === "number") ? rightEdgeMode : PrimitiveFailed.signal());	((typeof leftEdgeMode === "number") ? leftEdgeMode : PrimitiveFailed.signal());	((typeof destHeight === "number" && (destHeight | 0) !== destHeight && !Number.isSafeInteger(destHeight) || destHeight._class() === SmalltalkGlobals._Float) ? destHeight.valueOf() : PrimitiveFailed.signal());	((typeof destWidth === "number" && (destWidth | 0) !== destWidth && !Number.isSafeInteger(destWidth) || destWidth._class() === SmalltalkGlobals._Float) ? destWidth.valueOf() : PrimitiveFailed.signal());	if ((xOop.storageType === "words")) {	if ((yOop.storageType === "words")) {		if ((headingOop.storageType === "words")) {			if ((typeof valOop === "number" && (valOop | 0) !== valOop && !Number.isSafeInteger(valOop) || valOop._class() === SmalltalkGlobals._Float)) {				isValVector = false;			} else {				if ((valOop.storageType === "words")) {					isValVector = true;				} else {					throw Object.create(PrimitiveFailed).setPayload(1);					return null;				}			}			size = SIZEOF(xOop);			if (SIZEOF(yOop) !== size) {				throw Object.create(PrimitiveFailed).setPayload(1);				zzzTemp3 = null;			} else {				if (SIZEOF(headingOop) !== size) {					throw Object.create(PrimitiveFailed).setPayload(1);					zzzTemp4 = null;				} else {					if (isValVector) {						if (SIZEOF(valOop) !== size) {							throw Object.create(PrimitiveFailed).setPayload(1);							return null;						}					}					xArray = xOop.wordsAsFloat32Array();					yArray = yOop.wordsAsFloat32Array();					headingArray = headingOop.wordsAsFloat32Array();					if (isValVector) {						valArray = valOop.wordsAsFloat32Array();					} else {						val = ((typeof valOop === "number" && (valOop | 0) !== valOop && !Number.isSafeInteger(valOop) || valOop._class() === SmalltalkGlobals._Float) ? valOop.valueOf() : PrimitiveFailed.signal());					}					for (i = 0; i < size; i++) {						dist = isValVector ? valArray[i] : val;						newX = xArray[i] + (dist * Math.cos(headingArray[i]));						newY = yArray[i] - (dist * Math.sin(headingArray[i]));						/* begin scalarXAt:xArray:headingArray:value:destWidth:leftEdgeMode:rightEdgeMode: */						newX1 = newX;						if (newX1 < 0.0) {														switch (leftEdgeMode) {							case 1:																/* wrap */								newX1 += destWidth;								break;							case 2:																/* stick */								newX1 = 0.0;								break;							case 3:																/* bounce */								newX1 = 0.0 - newX1;								headingRadians = headingArray[i];								if (headingRadians < 3.141592653589793) {									headingArray[i] = (3.141592653589793 - headingRadians);								} else {									headingArray[i] = (9.42477796076938 - headingRadians);								}								break;							default:																null;							}						}						if (newX1 >= destWidth) {														switch (rightEdgeMode) {							case 1:																newX1 -= destWidth;								break;							case 2:																newX1 = destWidth - 1.0e-6;								break;							case 3:																newX1 = (destWidth - 1.0e-6) - (newX1 - destWidth);								headingRadians = headingArray[i];								if (headingRadians < 3.141592653589793) {									headingArray[i] = (3.141592653589793 - headingRadians);								} else {									headingArray[i] = (9.42477796076938 - headingRadians);								}								break;							default:																null;							}						}						xArray[i] = newX1;						/* end scalarXAt:xArray:headingArray:value:destWidth:leftEdgeMode:rightEdgeMode: */						/* begin scalarYAt:yArray:headingArray:value:destHeight:topEdgeMode:bottomEdgeMode: */						newY1 = newY;						if (newY1 < 0.0) {														switch (topEdgeMode) {							case 1:																/* wrap */								newY1 += destHeight;								break;							case 2:																/* stick */								newY1 = 0.0;								break;							case 3:																/* bounce */								newY1 = 0.0 - newY1;								headingArray[i] = (6.283185307179586 - headingArray[i]);								break;							default:																null;							}						}						if (newY1 >= destHeight) {														switch (bottomEdgeMode) {							case 1:																newY1 -= destHeight;								break;							case 2:																newY1 = destHeight - 1.0e-6;								break;							case 3:																newY1 = (destHeight - 1.0e-6) - (newY1 - destHeight);								headingArray[i] = (6.283185307179586 - headingArray[i]);								break;							default:																null;							}						}						yArray[i] = newY1;						/* end scalarYAt:yArray:headingArray:value:destHeight:topEdgeMode:bottomEdgeMode: */					}									zzzTemp5 = this;					zzzTemp4 = zzzTemp5;				}				zzzTemp3 = zzzTemp4;			}			zzzTemp2 = zzzTemp3;		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primUpHill(tX, tY, tH, bitsOop, width, height, sniffRange) {	let bits;	let endX;	let endY;	let maxVal;	let maxValX;	let maxValY;	let ret;	let rowOffset;	let startX;	let startY;	let thisVal;	let turtleX;	let turtleY;	let x;	let y;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	((typeof sniffRange === "number") ? sniffRange : PrimitiveFailed.signal());	((typeof height === "number") ? height : PrimitiveFailed.signal());	((typeof width === "number") ? width : PrimitiveFailed.signal());	((typeof tH === "number" && (tH | 0) !== tH && !Number.isSafeInteger(tH) || tH._class() === SmalltalkGlobals._Float) ? tH.valueOf() : PrimitiveFailed.signal());	((typeof tY === "number" && (tY | 0) !== tY && !Number.isSafeInteger(tY) || tY._class() === SmalltalkGlobals._Float) ? tY.valueOf() : PrimitiveFailed.signal());	((typeof tX === "number" && (tX | 0) !== tX && !Number.isSafeInteger(tX) || tX._class() === SmalltalkGlobals._Float) ? tX.valueOf() : PrimitiveFailed.signal());	if ((bitsOop.storageType === "words")) {	if (SIZEOF(bitsOop) !== (height * width)) {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	} else {		bits = bitsOop.words;		turtleX = tX;		turtleY = tY;		turtleX = Math.max(turtleX, 0);		turtleY = Math.max(turtleY, 0);		turtleX = Math.min(turtleX, (width - 1));		turtleY = Math.min(turtleY, (height - 1));		startX = Math.max((turtleX - sniffRange), 0);		endX = Math.min((turtleX + sniffRange), (width - 1));		startY = Math.max((turtleY - sniffRange), 0);		endY = Math.min((turtleY + sniffRange), (height - 1));		maxVal = bits[(turtleY * width) + turtleX];		maxValX = -1;		for (y = startY; y <= endY; y++) {			rowOffset = y * width;			for (x = startX; x <= endX; x++) {				thisVal = bits[rowOffset + x];				if (thisVal > maxVal) {					maxValX = x;					maxValY = y;					maxVal = thisVal;				}			}		}		ret = (-1 === maxValX) ? KedamaPlugin.radiansToDegrees(tH) : (KedamaPlugin.degreesFromXy((maxValX - turtleX), (maxValY - turtleY)) + 90.0);			throw Object.create(PrimitiveReturn).setPayload(typeof ret.valueOf() !== "number" ? PrimitiveFailed.signal() : ((ret.valueOf() | 0 === ret.valueOf()) || Number.isSafeInteger(ret) ? new Float(ret) : ret.valueOf()));	zzzTemp2 = this;		zzzTemp1 = zzzTemp2;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveAddArrays(rcvrOop, argOop, resultOop) {	let floatsArg;	let floatsRcvr;	let floatsResult;	let i;	let i1;	let i11;	let i2;	let isArgWords;	let isRcvrWords;	let length;	let wordsArg;	let wordsRcvr;	let wordsResult;	let zzzTemp;	let zzzTemp1;	((typeof resultOop === "number") ? PrimitiveFailed.signal() : resultOop);	((typeof argOop === "number") ? PrimitiveFailed.signal() : argOop);	((typeof rcvrOop === "number") ? PrimitiveFailed.signal() : rcvrOop);	if (!(argOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(rcvrOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(resultOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);length = SIZEOF(argOop);if (length !== SIZEOF(rcvrOop)) throw Object.create(PrimitiveFailed).setPayload(1);if (length !== SIZEOF(resultOop)) throw Object.create(PrimitiveFailed).setPayload(1);isArgWords = (argOop._class() === SmalltalkGlobals._WordArray);isRcvrWords = (rcvrOop._class() === SmalltalkGlobals._WordArray);if (isArgWords && isRcvrWords) {if (!(resultOop._class() === SmalltalkGlobals._WordArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}} else {if (!(resultOop._class() === SmalltalkGlobals._KedamaFloatArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}}if (isRcvrWords) {if (isArgWords) {wordsRcvr = rcvrOop.words;wordsArg = argOop.words;wordsResult = resultOop.words;for (i = 0; i < length; i++) {	wordsResult[i] = (wordsRcvr[i] + wordsArg[i]);}} else {wordsRcvr = rcvrOop.words;floatsArg = argOop.wordsAsFloat32Array();floatsResult = resultOop.wordsAsFloat32Array();for (i1 = 0; i1 < length; i1++) {	floatsResult[i1] = (wordsRcvr[i1] + floatsArg[i1]);}}} else {if (isArgWords) {floatsRcvr = rcvrOop.wordsAsFloat32Array();wordsArg = argOop.words;floatsResult = resultOop.wordsAsFloat32Array();for (i11 = 0; i11 < length; i11++) {	floatsResult[i11] = (floatsRcvr[i11] + wordsArg[i11]);}} else {floatsRcvr = rcvrOop.wordsAsFloat32Array();floatsArg = argOop.wordsAsFloat32Array();floatsResult = resultOop.wordsAsFloat32Array();for (i2 = 0; i2 < length; i2++) {	floatsResult[i2] = (floatsRcvr[i2] + floatsArg[i2]);}}}throw Object.create(PrimitiveReturn).setPayload(resultOop);zzzTemp1 = this;zzzTemp = zzzTemp1;return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveAddScalar(rcvrOop, argOop, resultOop) {	let floatArg;	let floatsRcvr;	let floatsResult;	let i;	let i1;	let i11;	let i2;	let intArg;	let isArgInt;	let isRcvrWords;	let length;	let wordsRcvr;	let wordsResult;	let zzzTemp;	let zzzTemp1;	((typeof resultOop === "number") ? PrimitiveFailed.signal() : resultOop);	((typeof rcvrOop === "number") ? PrimitiveFailed.signal() : rcvrOop);	if (!(rcvrOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(resultOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);length = SIZEOF(rcvrOop);if (length !== SIZEOF(resultOop)) throw Object.create(PrimitiveFailed).setPayload(1);isArgInt = (typeof argOop === "number");isRcvrWords = (rcvrOop._class() === SmalltalkGlobals._WordArray);if (isArgInt && isRcvrWords) {if (!(resultOop._class() === SmalltalkGlobals._WordArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}} else {if (!(resultOop._class() === SmalltalkGlobals._KedamaFloatArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}}if (isRcvrWords) {if (isArgInt) {wordsRcvr = rcvrOop.words;intArg = argOop;wordsResult = resultOop.words;for (i = 0; i < length; i++) {	wordsResult[i] = (wordsRcvr[i] + intArg);}} else {wordsRcvr = rcvrOop.words;floatArg = ((typeof argOop === "number" && (argOop | 0) !== argOop && !Number.isSafeInteger(argOop) || argOop._class() === SmalltalkGlobals._Float) ? argOop.valueOf() : PrimitiveFailed.signal());floatsResult = resultOop.wordsAsFloat32Array();for (i1 = 0; i1 < length; i1++) {	floatsResult[i1] = (wordsRcvr[i1] + floatArg);}}} else {if (isArgInt) {floatsRcvr = rcvrOop.wordsAsFloat32Array();intArg = argOop;floatsResult = resultOop.wordsAsFloat32Array();for (i11 = 0; i11 < length; i11++) {	floatsResult[i11] = (floatsRcvr[i11] + intArg);}} else {floatsRcvr = rcvrOop.wordsAsFloat32Array();floatArg = ((typeof argOop === "number" && (argOop | 0) !== argOop && !Number.isSafeInteger(argOop) || argOop._class() === SmalltalkGlobals._Float) ? argOop.valueOf() : PrimitiveFailed.signal());floatsResult = resultOop.wordsAsFloat32Array();for (i2 = 0; i2 < length; i2++) {	floatsResult[i2] = (floatsRcvr[i2] + floatArg);}}}throw Object.create(PrimitiveReturn).setPayload(resultOop);zzzTemp1 = this;zzzTemp = zzzTemp1;return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveDivArrays(rcvrOop, argOop, resultOop) {	let floatsArg;	let floatsRcvr;	let floatsResult;	let i;	let i1;	let i11;	let i2;	let isArgWords;	let isRcvrWords;	let length;	let wordsArg;	let wordsRcvr;	let wordsResult;	let zzzTemp;	let zzzTemp1;	((typeof resultOop === "number") ? PrimitiveFailed.signal() : resultOop);	((typeof argOop === "number") ? PrimitiveFailed.signal() : argOop);	((typeof rcvrOop === "number") ? PrimitiveFailed.signal() : rcvrOop);	if (!(argOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(rcvrOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(resultOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);length = SIZEOF(argOop);if (length !== SIZEOF(rcvrOop)) throw Object.create(PrimitiveFailed).setPayload(1);if (length !== SIZEOF(resultOop)) throw Object.create(PrimitiveFailed).setPayload(1);isArgWords = (argOop._class() === SmalltalkGlobals._WordArray);isRcvrWords = (rcvrOop._class() === SmalltalkGlobals._WordArray);if (isArgWords && isRcvrWords) {if (!(resultOop._class() === SmalltalkGlobals._WordArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}} else {if (!(resultOop._class() === SmalltalkGlobals._KedamaFloatArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}}if (isRcvrWords) {if (isArgWords) {wordsRcvr = rcvrOop.words;wordsArg = argOop.words;wordsResult = resultOop.words;for (i = 0; i < length; i++) {	wordsResult[i] = (wordsRcvr[i] / wordsArg[i]);}} else {wordsRcvr = rcvrOop.words;floatsArg = argOop.wordsAsFloat32Array();floatsResult = resultOop.wordsAsFloat32Array();for (i1 = 0; i1 < length; i1++) {	floatsResult[i1] = (wordsRcvr[i1] / floatsArg[i1]);}}} else {if (isArgWords) {floatsRcvr = rcvrOop.wordsAsFloat32Array();wordsArg = argOop.words;floatsResult = resultOop.wordsAsFloat32Array();for (i11 = 0; i11 < length; i11++) {	floatsResult[i11] = (floatsRcvr[i11] / wordsArg[i11]);}} else {floatsRcvr = rcvrOop.wordsAsFloat32Array();floatsArg = argOop.wordsAsFloat32Array();floatsResult = resultOop.wordsAsFloat32Array();for (i2 = 0; i2 < length; i2++) {	floatsResult[i2] = (floatsRcvr[i2] / floatsArg[i2]);}}}throw Object.create(PrimitiveReturn).setPayload(resultOop);zzzTemp1 = this;zzzTemp = zzzTemp1;return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveDivScalar(rcvrOop, argOop, resultOop) {	let floatArg;	let floatsRcvr;	let floatsResult;	let i;	let i1;	let i11;	let i2;	let intArg;	let isArgInt;	let isRcvrWords;	let length;	let wordsRcvr;	let wordsResult;	let zzzTemp;	let zzzTemp1;	((typeof resultOop === "number") ? PrimitiveFailed.signal() : resultOop);	((typeof rcvrOop === "number") ? PrimitiveFailed.signal() : rcvrOop);	if (!(rcvrOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(resultOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);length = SIZEOF(rcvrOop);if (length !== SIZEOF(resultOop)) throw Object.create(PrimitiveFailed).setPayload(1);isArgInt = (typeof argOop === "number");isRcvrWords = (rcvrOop._class() === SmalltalkGlobals._WordArray);if (isArgInt && isRcvrWords) {if (!(resultOop._class() === SmalltalkGlobals._WordArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}} else {if (!(resultOop._class() === SmalltalkGlobals._KedamaFloatArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}}if (isRcvrWords) {if (isArgInt) {wordsRcvr = rcvrOop.words;intArg = argOop;wordsResult = resultOop.words;for (i = 0; i < length; i++) {	wordsResult[i] = (Math.trunc(wordsRcvr[i] / intArg));}} else {wordsRcvr = rcvrOop.words;floatArg = ((typeof argOop === "number" && (argOop | 0) !== argOop && !Number.isSafeInteger(argOop) || argOop._class() === SmalltalkGlobals._Float) ? argOop.valueOf() : PrimitiveFailed.signal());floatsResult = resultOop.wordsAsFloat32Array();for (i1 = 0; i1 < length; i1++) {	floatsResult[i1] = (wordsRcvr[i1] / floatArg);}}} else {if (isArgInt) {floatsRcvr = rcvrOop.wordsAsFloat32Array();intArg = argOop;floatsResult = resultOop.wordsAsFloat32Array();for (i11 = 0; i11 < length; i11++) {	floatsResult[i11] = (floatsRcvr[i11] / intArg);}} else {floatsRcvr = rcvrOop.wordsAsFloat32Array();floatArg = ((typeof argOop === "number" && (argOop | 0) !== argOop && !Number.isSafeInteger(argOop) || argOop._class() === SmalltalkGlobals._Float) ? argOop.valueOf() : PrimitiveFailed.signal());floatsResult = resultOop.wordsAsFloat32Array();for (i2 = 0; i2 < length; i2++) {	floatsResult[i2] = (floatsRcvr[i2] / floatArg);}}}throw Object.create(PrimitiveReturn).setPayload(resultOop);zzzTemp1 = this;zzzTemp = zzzTemp1;return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveMulArrays(rcvrOop, argOop, resultOop) {	let floatsArg;	let floatsRcvr;	let floatsResult;	let i;	let i1;	let i11;	let i2;	let isArgWords;	let isRcvrWords;	let length;	let wordsArg;	let wordsRcvr;	let wordsResult;	let zzzTemp;	let zzzTemp1;	((typeof resultOop === "number") ? PrimitiveFailed.signal() : resultOop);	((typeof argOop === "number") ? PrimitiveFailed.signal() : argOop);	((typeof rcvrOop === "number") ? PrimitiveFailed.signal() : rcvrOop);	if (!(argOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(rcvrOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(resultOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);length = SIZEOF(argOop);if (length !== SIZEOF(rcvrOop)) throw Object.create(PrimitiveFailed).setPayload(1);if (length !== SIZEOF(resultOop)) throw Object.create(PrimitiveFailed).setPayload(1);isArgWords = (argOop._class() === SmalltalkGlobals._WordArray);isRcvrWords = (rcvrOop._class() === SmalltalkGlobals._WordArray);if (isArgWords && isRcvrWords) {if (!(resultOop._class() === SmalltalkGlobals._WordArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}} else {if (!(resultOop._class() === SmalltalkGlobals._KedamaFloatArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}}if (isRcvrWords) {if (isArgWords) {wordsRcvr = rcvrOop.words;wordsArg = argOop.words;wordsResult = resultOop.words;for (i = 0; i < length; i++) {	wordsResult[i] = (wordsRcvr[i] * wordsArg[i]);}} else {wordsRcvr = rcvrOop.words;floatsArg = argOop.wordsAsFloat32Array();floatsResult = resultOop.wordsAsFloat32Array();for (i1 = 0; i1 < length; i1++) {	floatsResult[i1] = (wordsRcvr[i1] * floatsArg[i1]);}}} else {if (isArgWords) {floatsRcvr = rcvrOop.wordsAsFloat32Array();wordsArg = argOop.words;floatsResult = resultOop.wordsAsFloat32Array();for (i11 = 0; i11 < length; i11++) {	floatsResult[i11] = (floatsRcvr[i11] * wordsArg[i11]);}} else {floatsRcvr = rcvrOop.wordsAsFloat32Array();floatsArg = argOop.wordsAsFloat32Array();floatsResult = resultOop.wordsAsFloat32Array();for (i2 = 0; i2 < length; i2++) {	floatsResult[i2] = (floatsRcvr[i2] * floatsArg[i2]);}}}throw Object.create(PrimitiveReturn).setPayload(resultOop);zzzTemp1 = this;zzzTemp = zzzTemp1;return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveMulScalar(rcvrOop, argOop, resultOop) {	let floatArg;	let floatsRcvr;	let floatsResult;	let i;	let i1;	let i11;	let i2;	let intArg;	let isArgInt;	let isRcvrWords;	let length;	let wordsRcvr;	let wordsResult;	let zzzTemp;	let zzzTemp1;	((typeof resultOop === "number") ? PrimitiveFailed.signal() : resultOop);	((typeof rcvrOop === "number") ? PrimitiveFailed.signal() : rcvrOop);	if (!(rcvrOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(resultOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);length = SIZEOF(rcvrOop);if (length !== SIZEOF(resultOop)) throw Object.create(PrimitiveFailed).setPayload(1);isArgInt = (typeof argOop === "number");isRcvrWords = (rcvrOop._class() === SmalltalkGlobals._WordArray);if (isArgInt && isRcvrWords) {if (!(resultOop._class() === SmalltalkGlobals._WordArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}} else {if (!(resultOop._class() === SmalltalkGlobals._KedamaFloatArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}}if (isRcvrWords) {if (isArgInt) {wordsRcvr = rcvrOop.words;intArg = argOop;wordsResult = resultOop.words;for (i = 0; i < length; i++) {	wordsResult[i] = (wordsRcvr[i] * intArg);}} else {wordsRcvr = rcvrOop.words;floatArg = ((typeof argOop === "number" && (argOop | 0) !== argOop && !Number.isSafeInteger(argOop) || argOop._class() === SmalltalkGlobals._Float) ? argOop.valueOf() : PrimitiveFailed.signal());floatsResult = resultOop.wordsAsFloat32Array();for (i1 = 0; i1 < length; i1++) {	floatsResult[i1] = (wordsRcvr[i1] * floatArg);}}} else {if (isArgInt) {floatsRcvr = rcvrOop.wordsAsFloat32Array();intArg = argOop;floatsResult = resultOop.wordsAsFloat32Array();for (i11 = 0; i11 < length; i11++) {	floatsResult[i11] = (floatsRcvr[i11] * intArg);}} else {floatsRcvr = rcvrOop.wordsAsFloat32Array();floatArg = ((typeof argOop === "number" && (argOop | 0) !== argOop && !Number.isSafeInteger(argOop) || argOop._class() === SmalltalkGlobals._Float) ? argOop.valueOf() : PrimitiveFailed.signal());floatsResult = resultOop.wordsAsFloat32Array();for (i2 = 0; i2 < length; i2++) {	floatsResult[i2] = (floatsRcvr[i2] * floatArg);}}}throw Object.create(PrimitiveReturn).setPayload(resultOop);zzzTemp1 = this;zzzTemp = zzzTemp1;return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveSubArrays(rcvrOop, argOop, resultOop) {	let floatsArg;	let floatsRcvr;	let floatsResult;	let i;	let i1;	let i11;	let i2;	let isArgWords;	let isRcvrWords;	let length;	let wordsArg;	let wordsRcvr;	let wordsResult;	let zzzTemp;	let zzzTemp1;	((typeof resultOop === "number") ? PrimitiveFailed.signal() : resultOop);	((typeof argOop === "number") ? PrimitiveFailed.signal() : argOop);	((typeof rcvrOop === "number") ? PrimitiveFailed.signal() : rcvrOop);	if (!(argOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(rcvrOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(resultOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);length = SIZEOF(argOop);if (length !== SIZEOF(rcvrOop)) throw Object.create(PrimitiveFailed).setPayload(1);if (length !== SIZEOF(resultOop)) throw Object.create(PrimitiveFailed).setPayload(1);isArgWords = (argOop._class() === SmalltalkGlobals._WordArray);isRcvrWords = (rcvrOop._class() === SmalltalkGlobals._WordArray);if (isArgWords && isRcvrWords) {if (!(resultOop._class() === SmalltalkGlobals._WordArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}} else {if (!(resultOop._class() === SmalltalkGlobals._KedamaFloatArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}}if (isRcvrWords) {if (isArgWords) {wordsRcvr = rcvrOop.words;wordsArg = argOop.words;wordsResult = resultOop.words;for (i = 0; i < length; i++) {	wordsResult[i] = (wordsRcvr[i] - wordsArg[i]);}} else {wordsRcvr = rcvrOop.words;floatsArg = argOop.wordsAsFloat32Array();floatsResult = resultOop.wordsAsFloat32Array();for (i1 = 0; i1 < length; i1++) {	floatsResult[i1] = (wordsRcvr[i1] - floatsArg[i1]);}}} else {if (isArgWords) {floatsRcvr = rcvrOop.wordsAsFloat32Array();wordsArg = argOop.words;floatsResult = resultOop.wordsAsFloat32Array();for (i11 = 0; i11 < length; i11++) {	floatsResult[i11] = (floatsRcvr[i11] - wordsArg[i11]);}} else {floatsRcvr = rcvrOop.wordsAsFloat32Array();floatsArg = argOop.wordsAsFloat32Array();floatsResult = resultOop.wordsAsFloat32Array();for (i2 = 0; i2 < length; i2++) {	floatsResult[i2] = (floatsRcvr[i2] - floatsArg[i2]);}}}throw Object.create(PrimitiveReturn).setPayload(resultOop);zzzTemp1 = this;zzzTemp = zzzTemp1;return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, primitiveSubScalar(rcvrOop, argOop, resultOop) {	let floatArg;	let floatsRcvr;	let floatsResult;	let i;	let i1;	let i11;	let i2;	let intArg;	let isArgInt;	let isRcvrWords;	let length;	let wordsRcvr;	let wordsResult;	let zzzTemp;	let zzzTemp1;	((typeof resultOop === "number") ? PrimitiveFailed.signal() : resultOop);	((typeof rcvrOop === "number") ? PrimitiveFailed.signal() : rcvrOop);	if (!(rcvrOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);if (!(resultOop.storageType === "words")) throw Object.create(PrimitiveFailed).setPayload(1);length = SIZEOF(rcvrOop);if (length !== SIZEOF(resultOop)) throw Object.create(PrimitiveFailed).setPayload(1);isArgInt = (typeof argOop === "number");isRcvrWords = (rcvrOop._class() === SmalltalkGlobals._WordArray);if (isArgInt && isRcvrWords) {if (!(resultOop._class() === SmalltalkGlobals._WordArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}} else {if (!(resultOop._class() === SmalltalkGlobals._KedamaFloatArray)) {throw Object.create(PrimitiveFailed).setPayload(1);return null;}}if (isRcvrWords) {if (isArgInt) {wordsRcvr = rcvrOop.words;intArg = argOop;wordsResult = resultOop.words;for (i = 0; i < length; i++) {	wordsResult[i] = (wordsRcvr[i] - intArg);}} else {wordsRcvr = rcvrOop.words;floatArg = ((typeof argOop === "number" && (argOop | 0) !== argOop && !Number.isSafeInteger(argOop) || argOop._class() === SmalltalkGlobals._Float) ? argOop.valueOf() : PrimitiveFailed.signal());floatsResult = resultOop.wordsAsFloat32Array();for (i1 = 0; i1 < length; i1++) {	floatsResult[i1] = (wordsRcvr[i1] - floatArg);}}} else {if (isArgInt) {floatsRcvr = rcvrOop.wordsAsFloat32Array();intArg = argOop;floatsResult = resultOop.wordsAsFloat32Array();for (i11 = 0; i11 < length; i11++) {	floatsResult[i11] = (floatsRcvr[i11] - intArg);}} else {floatsRcvr = rcvrOop.wordsAsFloat32Array();floatArg = ((typeof argOop === "number" && (argOop | 0) !== argOop && !Number.isSafeInteger(argOop) || argOop._class() === SmalltalkGlobals._Float) ? argOop.valueOf() : PrimitiveFailed.signal());floatsResult = resultOop.wordsAsFloat32Array();for (i2 = 0; i2 < length; i2++) {	floatsResult[i2] = (floatsRcvr[i2] - floatArg);}}}throw Object.create(PrimitiveReturn).setPayload(resultOop);zzzTemp1 = this;zzzTemp = zzzTemp1;return zzzTemp;	throw Object.create(PrimitiveReturn).setPayload(this);}, radiansToDegrees(radians) {	let deg;	let degrees;	degrees = radians / 0.0174532925199433;	deg = 90.0 - degrees;	if (!(deg > 0.0)) {		deg += 360.0;	}	return deg;}, randomIntoFloatArray(range, from, to, floatArrayOop, factor) {	let floatArray;	let index;	let size;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	((typeof factor === "number" && (factor | 0) !== factor && !Number.isSafeInteger(factor) || factor._class() === SmalltalkGlobals._Float) ? factor.valueOf() : PrimitiveFailed.signal());	((typeof to === "number") ? to : PrimitiveFailed.signal());	((typeof from === "number") ? from : PrimitiveFailed.signal());	((typeof range === "number") ? range : PrimitiveFailed.signal());	if ((floatArrayOop.storageType === "words")) {	size = SIZEOF(floatArrayOop);	if ((size >= to) && ((from >= 1) && (to >= from))) {		floatArray = floatArrayOop.wordsAsFloat32Array();			for (index = from; index <= to; index++) {		floatArray[index - 1] = (KedamaPlugin.kedamaRandom2(range) * factor);	}	zzzTemp2 = this;		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, randomIntoIntegerArray(range, from, to, integerArrayOop, factor) {	let index;	let integerArray;	let size;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	((typeof factor === "number" && (factor | 0) !== factor && !Number.isSafeInteger(factor) || factor._class() === SmalltalkGlobals._Float) ? factor.valueOf() : PrimitiveFailed.signal());	((typeof to === "number") ? to : PrimitiveFailed.signal());	((typeof from === "number") ? from : PrimitiveFailed.signal());	((typeof range === "number") ? range : PrimitiveFailed.signal());	if ((integerArrayOop.storageType === "words")) {	size = SIZEOF(integerArrayOop);	if ((size >= to) && ((from >= 1) && (to >= from))) {		integerArray = integerArrayOop.words;			for (index = from; index <= to; index++) {		integerArray[index - 1] = ((KedamaPlugin.kedamaRandom2(range) * factor)|0);	}	zzzTemp2 = this;		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, randomRange(range) {	let ret;	let zzzTemp;	let hi;	let lo;	let r;	let v;	let val;	((typeof range === "number") ? range : PrimitiveFailed.signal());	/* begin kedamaRandom2: */r = (range < 0) ? (0 - range) : range;hi = Math.trunc(kedamaRandomSeed / randQ);lo = MOD(kedamaRandomSeed, randQ);kedamaRandomSeed = (randA * lo) - (randR * hi);v = UBANDS(kedamaRandomSeed, 65535);val = (v * (r + 1)) >>> 16;ret = (range < 0) ? (0 - val) : val;/* end kedamaRandom2: */throw Object.create(PrimitiveReturn).setPayload(((typeof ret === "number") ? ret : PrimitiveFailed.signal()));zzzTemp = this;return zzzTemp;}, scalarGetAngleTo(toX, toY, fromX, fromY) {	let r;	let x;	let y;	let zzzTemp;	let tanVal;	let theta;	((typeof fromY === "number" && (fromY | 0) !== fromY && !Number.isSafeInteger(fromY) || fromY._class() === SmalltalkGlobals._Float) ? fromY.valueOf() : PrimitiveFailed.signal());	((typeof fromX === "number" && (fromX | 0) !== fromX && !Number.isSafeInteger(fromX) || fromX._class() === SmalltalkGlobals._Float) ? fromX.valueOf() : PrimitiveFailed.signal());	((typeof toY === "number" && (toY | 0) !== toY && !Number.isSafeInteger(toY) || toY._class() === SmalltalkGlobals._Float) ? toY.valueOf() : PrimitiveFailed.signal());	((typeof toX === "number" && (toX | 0) !== toX && !Number.isSafeInteger(toX) || toX._class() === SmalltalkGlobals._Float) ? toX.valueOf() : PrimitiveFailed.signal());	x = toX - fromX;y = toY - fromY;/* begin degreesFromX:y: */if (x === 0.0) {	r = (y >= 0.0) ? 90.0 : 270.0;} else {	tanVal = y / x;	theta = Math.atan(tanVal);	r = (x >= 0.0) ? ((y >= 0.0) ? (theta / 0.0174532925199433) : (360.0 + (theta / 0.0174532925199433))) : (180.0 + (theta / 0.0174532925199433));}/* end degreesFromX:y: */r += 90.0;if (r > 360.0) {	r -= 360.0;}throw Object.create(PrimitiveReturn).setPayload(typeof r.valueOf() !== "number" ? PrimitiveFailed.signal() : ((r.valueOf() | 0 === r.valueOf()) || Number.isSafeInteger(r) ? new Float(r) : r.valueOf()));zzzTemp = this;return zzzTemp;}, scalarGetDistanceTo(toX, toY, fromX, fromY) {	let r;	let x;	let y;	let zzzTemp;	((typeof fromY === "number" && (fromY | 0) !== fromY && !Number.isSafeInteger(fromY) || fromY._class() === SmalltalkGlobals._Float) ? fromY.valueOf() : PrimitiveFailed.signal());	((typeof fromX === "number" && (fromX | 0) !== fromX && !Number.isSafeInteger(fromX) || fromX._class() === SmalltalkGlobals._Float) ? fromX.valueOf() : PrimitiveFailed.signal());	((typeof toY === "number" && (toY | 0) !== toY && !Number.isSafeInteger(toY) || toY._class() === SmalltalkGlobals._Float) ? toY.valueOf() : PrimitiveFailed.signal());	((typeof toX === "number" && (toX | 0) !== toX && !Number.isSafeInteger(toX) || toX._class() === SmalltalkGlobals._Float) ? toX.valueOf() : PrimitiveFailed.signal());	x = fromX - toX;y = fromY - toY;r = Math.sqrt((x * x) + (y * y));throw Object.create(PrimitiveReturn).setPayload(typeof r.valueOf() !== "number" ? PrimitiveFailed.signal() : ((r.valueOf() | 0 === r.valueOf()) || Number.isSafeInteger(r) ? new Float(r) : r.valueOf()));zzzTemp = this;return zzzTemp;}, setHeadingArrayFrom(headingOop, resultOop) {	let heading;	let headingArray;	let i;	let isValVector;	let resultArray;	let size;	let deg;	let headingRadians;	let q;	let deg1;	let headingRadians1;	let q1;	if ((headingOop.storageType === "words")) {	size = SIZEOF(headingOop);	if ((typeof resultOop === "number" && (resultOop | 0) !== resultOop && !Number.isSafeInteger(resultOop) || resultOop._class() === SmalltalkGlobals._Float)) {		isValVector = false;	} else {		if ((resultOop.storageType === "words")) {			if (SIZEOF(resultOop) !== size) {				throw Object.create(PrimitiveFailed).setPayload(1);				return null;			} else {				isValVector = true;			}		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			return null;		}	}	headingArray = headingOop.wordsAsFloat32Array();	if (isValVector) {		resultArray = resultOop.wordsAsFloat32Array();	} else {		heading = ((typeof resultOop === "number" && (resultOop | 0) !== resultOop && !Number.isSafeInteger(resultOop) || resultOop._class() === SmalltalkGlobals._Float) ? resultOop.valueOf() : PrimitiveFailed.signal());		/* begin degreesToRadians: */		deg = 90.0 - heading;		q = deg / 360.0|0;		if (deg < 0.0) {			--q;		}		headingRadians = (deg - (q * 360.0)) * 0.0174532925199433;		heading = headingRadians;		/* end degreesToRadians: */	}	for (i = 0; i < size; i++) {		if (isValVector) {			heading = resultArray[i];			/* begin degreesToRadians: */			deg1 = 90.0 - heading;			q1 = deg1 / 360.0|0;			if (deg1 < 0.0) {				--q1;			}			headingRadians1 = (deg1 - (q1 * 360.0)) * 0.0174532925199433;			heading = headingRadians1;			/* end degreesToRadians: */		}		headingArray[i] = heading;	}	return this;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	return null;}}, setScalarHeading(index, headingOop, heading) {	let headingArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	((typeof heading === "number" && (heading | 0) !== heading && !Number.isSafeInteger(heading) || heading._class() === SmalltalkGlobals._Float) ? heading.valueOf() : PrimitiveFailed.signal());	((typeof index === "number") ? index : PrimitiveFailed.signal());	if ((headingOop.storageType === "words")) {	if (SIZEOF(headingOop) < index) {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	} else {		headingArray = headingOop.wordsAsFloat32Array();		headingArray[index - 1] = KedamaPlugin.degreesToRadians(heading);			zzzTemp2 = this;		zzzTemp1 = zzzTemp2;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, shutdownModule() {	return true;}, turtleScalarSetX(xOop, xIndex, headingOop, val, destWidth, leftEdgeMode, rightEdgeMode) {	let headingArray;	let size;	let xArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let index;	let headingRadians;	let newX;	((typeof rightEdgeMode === "number") ? rightEdgeMode : PrimitiveFailed.signal());	((typeof leftEdgeMode === "number") ? leftEdgeMode : PrimitiveFailed.signal());	((typeof destWidth === "number" && (destWidth | 0) !== destWidth && !Number.isSafeInteger(destWidth) || destWidth._class() === SmalltalkGlobals._Float) ? destWidth.valueOf() : PrimitiveFailed.signal());	((typeof val === "number" && (val | 0) !== val && !Number.isSafeInteger(val) || val._class() === SmalltalkGlobals._Float) ? val.valueOf() : PrimitiveFailed.signal());	((typeof xIndex === "number") ? xIndex : PrimitiveFailed.signal());	if ((xOop.storageType === "words")) {	if ((headingOop.storageType === "words")) {		size = SIZEOF(xOop);		if (SIZEOF(headingOop) !== size) {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		} else {			xArray = xOop.wordsAsFloat32Array();			headingArray = headingOop.wordsAsFloat32Array();			/* begin scalarXAt:xArray:headingArray:value:destWidth:leftEdgeMode:rightEdgeMode: */			index = xIndex - 1;			newX = val;			if (newX < 0.0) {								switch (leftEdgeMode) {				case 1:										/* wrap */					newX1 += destWidth;					break;				case 2:										/* stick */					newX1 = 0.0|0;					break;				case 3:										/* bounce */					newX1 = 0.0 - newX1|0;					headingRadians = headingArray[i];					if (headingRadians < 3.141592653589793) {						headingArray[i] = (3.141592653589793 - headingRadians);					} else {						headingArray[i] = (9.42477796076938 - headingRadians);					}					break;				default:										null;				}			}			if (newX >= destWidth) {								switch (rightEdgeMode) {				case 1:										newX1 -= destWidth;					break;				case 2:										newX1 = destWidth - 1.0e-6|0;					break;				case 3:										newX1 = (destWidth - 1.0e-6) - (newX1 - destWidth)|0;					headingRadians = headingArray[i];					if (headingRadians < 3.141592653589793) {						headingArray[i] = (3.141592653589793 - headingRadians);					} else {						headingArray[i] = (9.42477796076938 - headingRadians);					}					break;				default:										null;				}			}			xArray[index] = newX;			/* end scalarXAt:xArray:headingArray:value:destWidth:leftEdgeMode:rightEdgeMode: */					zzzTemp3 = this;			zzzTemp2 = zzzTemp3;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, turtleScalarSetY(yOop, yIndex, headingOop, val, destHeight, topEdgeMode, bottomEdgeMode) {	let headingArray;	let size;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let index;	let newY;	((typeof bottomEdgeMode === "number") ? bottomEdgeMode : PrimitiveFailed.signal());	((typeof topEdgeMode === "number") ? topEdgeMode : PrimitiveFailed.signal());	((typeof destHeight === "number" && (destHeight | 0) !== destHeight && !Number.isSafeInteger(destHeight) || destHeight._class() === SmalltalkGlobals._Float) ? destHeight.valueOf() : PrimitiveFailed.signal());	((typeof val === "number" && (val | 0) !== val && !Number.isSafeInteger(val) || val._class() === SmalltalkGlobals._Float) ? val.valueOf() : PrimitiveFailed.signal());	((typeof yIndex === "number") ? yIndex : PrimitiveFailed.signal());	if ((yOop.storageType === "words")) {	if ((headingOop.storageType === "words")) {		size = SIZEOF(yOop);		if (SIZEOF(headingOop) !== size) {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		} else {			yArray = yOop.wordsAsFloat32Array();			headingArray = headingOop.wordsAsFloat32Array();			/* begin scalarYAt:yArray:headingArray:value:destHeight:topEdgeMode:bottomEdgeMode: */			index = yIndex - 1;			newY = val;			if (newY < 0.0) {								switch (topEdgeMode) {				case 1:										/* wrap */					newY1 += destHeight;					break;				case 2:										/* stick */					newY1 = 0.0|0;					break;				case 3:										/* bounce */					newY1 = 0.0 - newY1|0;					headingArray[i] = (6.283185307179586 - headingArray[i]);					break;				default:										null;				}			}			if (newY >= destHeight) {								switch (bottomEdgeMode) {				case 1:										newY1 -= destHeight;					break;				case 2:										newY1 = destHeight - 1.0e-6|0;					break;				case 3:										newY1 = (destHeight - 1.0e-6) - (newY1 - destHeight)|0;					headingArray[i] = (6.283185307179586 - headingArray[i]);					break;				default:										null;				}			}			yArray[index] = newY;			/* end scalarYAt:yArray:headingArray:value:destHeight:topEdgeMode:bottomEdgeMode: */					zzzTemp3 = this;			zzzTemp2 = zzzTemp3;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, turtlesSetX(xOop, headingOop, valOop, destWidth, leftEdgeMode, rightEdgeMode) {	let headingArray;	let i;	let isValVector;	let newX;	let size;	let val;	let valArray;	let xArray;	let headingRadians;	let newX1;	((typeof rightEdgeMode === "number") ? rightEdgeMode : PrimitiveFailed.signal());	((typeof leftEdgeMode === "number") ? leftEdgeMode : PrimitiveFailed.signal());	((typeof destWidth === "number" && (destWidth | 0) !== destWidth && !Number.isSafeInteger(destWidth) || destWidth._class() === SmalltalkGlobals._Float) ? destWidth.valueOf() : PrimitiveFailed.signal());	if ((xOop.storageType === "words")) {	if ((headingOop.storageType === "words")) {		if ((typeof valOop === "number" && (valOop | 0) !== valOop && !Number.isSafeInteger(valOop) || valOop._class() === SmalltalkGlobals._Float)) {			isValVector = false;		} else {			if ((valOop.storageType === "words")) {				isValVector = true;			} else {				throw Object.create(PrimitiveFailed).setPayload(1);				return null;			}		}		size = SIZEOF(xOop);		if (SIZEOF(headingOop) !== size) {			throw Object.create(PrimitiveFailed).setPayload(1);			return null;		} else {			if (isValVector) {				if (SIZEOF(valOop) !== size) {					throw Object.create(PrimitiveFailed).setPayload(1);					return null;				}			}			xArray = xOop.wordsAsFloat32Array();			headingArray = headingOop.wordsAsFloat32Array();			if (isValVector) {				valArray = valOop.wordsAsFloat32Array();			} else {				val = ((typeof valOop === "number" && (valOop | 0) !== valOop && !Number.isSafeInteger(valOop) || valOop._class() === SmalltalkGlobals._Float) ? valOop.valueOf() : PrimitiveFailed.signal());			}			for (i = 0; i < size; i++) {				newX = isValVector ? valArray[i] : val;				/* begin scalarXAt:xArray:headingArray:value:destWidth:leftEdgeMode:rightEdgeMode: */				newX1 = newX;				if (newX1 < 0.0) {										switch (leftEdgeMode) {					case 1:												/* wrap */						newX1 += destWidth;						break;					case 2:												/* stick */						newX1 = 0.0;						break;					case 3:												/* bounce */						newX1 = 0.0 - newX1;						headingRadians = headingArray[i];						if (headingRadians < 3.141592653589793) {							headingArray[i] = (3.141592653589793 - headingRadians);						} else {							headingArray[i] = (9.42477796076938 - headingRadians);						}						break;					default:												null;					}				}				if (newX1 >= destWidth) {										switch (rightEdgeMode) {					case 1:												newX1 -= destWidth;						break;					case 2:												newX1 = destWidth - 1.0e-6;						break;					case 3:												newX1 = (destWidth - 1.0e-6) - (newX1 - destWidth);						headingRadians = headingArray[i];						if (headingRadians < 3.141592653589793) {							headingArray[i] = (3.141592653589793 - headingRadians);						} else {							headingArray[i] = (9.42477796076938 - headingRadians);						}						break;					default:												null;					}				}				xArray[i] = newX1;				/* end scalarXAt:xArray:headingArray:value:destWidth:leftEdgeMode:rightEdgeMode: */			}					return this;		}	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		return null;	}} else {	throw Object.create(PrimitiveFailed).setPayload(1);	return null;}}, turtlesSetY(yOop, headingOop, valOop, destHeight, topEdgeMode, bottomEdgeMode) {	let headingArray;	let i;	let isValVector;	let newY;	let size;	let val;	let valArray;	let yArray;	let newY1;	((typeof bottomEdgeMode === "number") ? bottomEdgeMode : PrimitiveFailed.signal());	((typeof topEdgeMode === "number") ? topEdgeMode : PrimitiveFailed.signal());	((typeof destHeight === "number" && (destHeight | 0) !== destHeight && !Number.isSafeInteger(destHeight) || destHeight._class() === SmalltalkGlobals._Float) ? destHeight.valueOf() : PrimitiveFailed.signal());	if ((yOop.storageType === "words")) {	if ((headingOop.storageType === "words")) {		if ((typeof valOop === "number" && (valOop | 0) !== valOop && !Number.isSafeInteger(valOop) || valOop._class() === SmalltalkGlobals._Float)) {			isValVector = false;		} else {			if ((valOop.storageType === "words")) {				isValVector = true;			} else {				throw Object.create(PrimitiveFailed).setPayload(1);				return null;			}		}		size = SIZEOF(yOop);		if (SIZEOF(headingOop) !== size) {			throw Object.create(PrimitiveFailed).setPayload(1);			return null;		} else {			if (isValVector) {				if (SIZEOF(valOop) !== size) {					throw Object.create(PrimitiveFailed).setPayload(1);					return null;				}			}			yArray = yOop.wordsAsFloat32Array();			headingArray = headingOop.wordsAsFloat32Array();			if (isValVector) {				valArray = valOop.wordsAsFloat32Array();			} else {				val = ((typeof valOop === "number" && (valOop | 0) !== valOop && !Number.isSafeInteger(valOop) || valOop._class() === SmalltalkGlobals._Float) ? valOop.valueOf() : PrimitiveFailed.signal());			}			for (i = 0; i < size; i++) {				newY = isValVector ? valArray[i] : val;				/* begin scalarYAt:yArray:headingArray:value:destHeight:topEdgeMode:bottomEdgeMode: */				newY1 = newY;				if (newY1 < 0.0) {										switch (topEdgeMode) {					case 1:												/* wrap */						newY1 += destHeight;						break;					case 2:												/* stick */						newY1 = 0.0;						break;					case 3:												/* bounce */						newY1 = 0.0 - newY1;						headingArray[i] = (6.283185307179586 - headingArray[i]);						break;					default:												null;					}				}				if (newY1 >= destHeight) {										switch (bottomEdgeMode) {					case 1:												newY1 -= destHeight;						break;					case 2:												newY1 = destHeight - 1.0e-6;						break;					case 3:												newY1 = (destHeight - 1.0e-6) - (newY1 - destHeight);						headingArray[i] = (6.283185307179586 - headingArray[i]);						break;					default:												null;					}				}				yArray[i] = newY1;				/* end scalarYAt:yArray:headingArray:value:destHeight:topEdgeMode:bottomEdgeMode: */			}					return this;		}	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		return null;	}} else {	throw Object.create(PrimitiveFailed).setPayload(1);	return null;}}, vectorGetAngleTo(pXOop, pYOop, xArrayOop, yArrayOop, resultOop) {	let index;	let isVector;	let pX;	let pY;	let ppx;	let ppy;	let r;	let result;	let size;	let x;	let xArray;	let y;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let zzzTemp4;	let zzzTemp5;	let zzzTemp6;	let tanVal;	let theta;	if ((resultOop.storageType === "words")) {	if ((xArrayOop.storageType === "words")) {		if ((yArrayOop.storageType === "words")) {			size = SIZEOF(resultOop);			if (size < 0) {				throw Object.create(PrimitiveFailed).setPayload(1);				zzzTemp3 = null;			} else {				if (SIZEOF(xArrayOop) !== size) {					throw Object.create(PrimitiveFailed).setPayload(1);					zzzTemp4 = null;				} else {					if (SIZEOF(yArrayOop) !== size) {						throw Object.create(PrimitiveFailed).setPayload(1);						zzzTemp5 = null;					} else {						if ((typeof pXOop === "number" && (pXOop | 0) !== pXOop && !Number.isSafeInteger(pXOop) || pXOop._class() === SmalltalkGlobals._Float)) {							if ((typeof pYOop === "number" && (pYOop | 0) !== pYOop && !Number.isSafeInteger(pYOop) || pYOop._class() === SmalltalkGlobals._Float)) {								isVector = false;							} else {								throw Object.create(PrimitiveFailed).setPayload(1);								return null;							}						} else {							if ((typeof pYOop === "number" && (pYOop | 0) !== pYOop && !Number.isSafeInteger(pYOop) || pYOop._class() === SmalltalkGlobals._Float)) {								throw Object.create(PrimitiveFailed).setPayload(1);								return null;							} else {								isVector = true;							}						}						if (isVector) {							if (SIZEOF(pXOop) !== size) {								throw Object.create(PrimitiveFailed).setPayload(1);								return null;							} else {								if (SIZEOF(pYOop) !== size) {									throw Object.create(PrimitiveFailed).setPayload(1);									return null;								}							}						}						result = resultOop.wordsAsFloat32Array();						xArray = xArrayOop.wordsAsFloat32Array();						yArray = yArrayOop.wordsAsFloat32Array();						if (isVector) {							pX = pXOop.wordsAsFloat32Array();							pY = pYOop.wordsAsFloat32Array();						}						if (!isVector) {							ppx = ((typeof pXOop === "number" && (pXOop | 0) !== pXOop && !Number.isSafeInteger(pXOop) || pXOop._class() === SmalltalkGlobals._Float) ? pXOop.valueOf() : PrimitiveFailed.signal());							ppy = ((typeof pYOop === "number" && (pYOop | 0) !== pYOop && !Number.isSafeInteger(pYOop) || pYOop._class() === SmalltalkGlobals._Float) ? pYOop.valueOf() : PrimitiveFailed.signal());						}						for (index = 0; index < size; index++) {							if (isVector) {								ppx = pX[index];								ppy = pY[index];							}							x = ppx - xArray[index];							y = ppy - yArray[index];							/* begin degreesFromX:y: */							if (x === 0.0) {								r = (y >= 0.0) ? 90.0 : 270.0;							} else {								tanVal = y / x;								theta = Math.atan(tanVal);								r = (x >= 0.0) ? ((y >= 0.0) ? (theta / 0.0174532925199433) : (360.0 + (theta / 0.0174532925199433))) : (180.0 + (theta / 0.0174532925199433));							}							/* end degreesFromX:y: */							r += 90.0;							if (r > 360.0) {								r -= 360.0;							}							result[index] = r;						}											throw Object.create(PrimitiveReturn).setPayload(resultOop);					zzzTemp6 = this;						zzzTemp5 = zzzTemp6;					}					zzzTemp4 = zzzTemp5;				}				zzzTemp3 = zzzTemp4;			}			zzzTemp2 = zzzTemp3;		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, vectorGetDistanceTo(pXOop, pYOop, xArrayOop, yArrayOop, resultOop) {	let index;	let isVector;	let pX;	let pY;	let ppx;	let ppy;	let result;	let size;	let x;	let xArray;	let y;	let yArray;	let zzzTemp;	let zzzTemp1;	let zzzTemp2;	let zzzTemp3;	let zzzTemp4;	let zzzTemp5;	let zzzTemp6;	if ((resultOop.storageType === "words")) {	if ((xArrayOop.storageType === "words")) {		if ((yArrayOop.storageType === "words")) {			size = SIZEOF(resultOop);			if (size < 0) {				throw Object.create(PrimitiveFailed).setPayload(1);				zzzTemp3 = null;			} else {				if (SIZEOF(xArrayOop) !== size) {					throw Object.create(PrimitiveFailed).setPayload(1);					zzzTemp4 = null;				} else {					if (SIZEOF(yArrayOop) !== size) {						throw Object.create(PrimitiveFailed).setPayload(1);						zzzTemp5 = null;					} else {						if ((typeof pXOop === "number" && (pXOop | 0) !== pXOop && !Number.isSafeInteger(pXOop) || pXOop._class() === SmalltalkGlobals._Float)) {							if ((typeof pYOop === "number" && (pYOop | 0) !== pYOop && !Number.isSafeInteger(pYOop) || pYOop._class() === SmalltalkGlobals._Float)) {								isVector = false;							} else {								throw Object.create(PrimitiveFailed).setPayload(1);								return null;							}						} else {							if ((typeof pYOop === "number" && (pYOop | 0) !== pYOop && !Number.isSafeInteger(pYOop) || pYOop._class() === SmalltalkGlobals._Float)) {								throw Object.create(PrimitiveFailed).setPayload(1);								return null;							} else {								isVector = true;							}						}						if (isVector) {							if (SIZEOF(pXOop) !== size) {								throw Object.create(PrimitiveFailed).setPayload(1);								return null;							} else {								if (SIZEOF(pYOop) !== size) {									throw Object.create(PrimitiveFailed).setPayload(1);									return null;								}							}						}						result = resultOop.wordsAsFloat32Array();						xArray = xArrayOop.wordsAsFloat32Array();						yArray = yArrayOop.wordsAsFloat32Array();						if (isVector) {							pX = pXOop.wordsAsFloat32Array();							pY = pYOop.wordsAsFloat32Array();						}						if (!isVector) {							ppx = ((typeof pXOop === "number" && (pXOop | 0) !== pXOop && !Number.isSafeInteger(pXOop) || pXOop._class() === SmalltalkGlobals._Float) ? pXOop.valueOf() : PrimitiveFailed.signal());							ppy = ((typeof pYOop === "number" && (pYOop | 0) !== pYOop && !Number.isSafeInteger(pYOop) || pYOop._class() === SmalltalkGlobals._Float) ? pYOop.valueOf() : PrimitiveFailed.signal());						}						for (index = 0; index < size; index++) {							if (isVector) {								ppx = pX[index];								ppy = pY[index];							}							x = ppx - xArray[index];							y = ppy - yArray[index];							result[index] = Math.sqrt((x * x) + (y * y));						}											throw Object.create(PrimitiveReturn).setPayload(resultOop);					zzzTemp6 = this;						zzzTemp5 = zzzTemp6;					}					zzzTemp4 = zzzTemp5;				}				zzzTemp3 = zzzTemp4;			}			zzzTemp2 = zzzTemp3;		} else {			throw Object.create(PrimitiveFailed).setPayload(1);			zzzTemp2 = null;		}		zzzTemp1 = zzzTemp2;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, zoomBitmap(src, dst, sWidth, sHeight, xFactor, yFactor) {	let bit;	let dOrigin;	let dstIndex;	let dstSize;	let dummy;	let sOrigin;	let srcIndex;	let srcOrigin;	let srcSize;	let sx;	let sy;	let y;	let zzzTemp;	let zzzTemp1;	((typeof yFactor === "number") ? yFactor : PrimitiveFailed.signal());	((typeof xFactor === "number") ? xFactor : PrimitiveFailed.signal());	((typeof sHeight === "number") ? sHeight : PrimitiveFailed.signal());	((typeof sWidth === "number") ? sWidth : PrimitiveFailed.signal());	srcSize = SIZEOF(src);dstSize = SIZEOF(dst);if ((sWidth * sHeight) === srcSize) {	if (((srcSize * xFactor) * yFactor) === dstSize) {		sOrigin = src.words;		dOrigin = dst.words;		srcIndex = 0;		srcOrigin = 0;		dstIndex = 0;		for (sy = 0; sy < sHeight; sy++) {			for (y = 0; y < yFactor; y++) {				for (sx = 0; sx < sWidth; sx++) {					bit = sOrigin[srcIndex];					++srcIndex;					for (dummy = 0; dummy < xFactor; dummy++) {						dOrigin[dstIndex] = bit;						++dstIndex;					}				}				srcIndex = srcOrigin;			}			srcOrigin += sWidth;			srcIndex = srcOrigin;		}		zzzTemp1 = this;	} else {		throw Object.create(PrimitiveFailed).setPayload(1);		zzzTemp1 = null;	}	zzzTemp = zzzTemp1;} else {	throw Object.create(PrimitiveFailed).setPayload(1);	zzzTemp = null;}return zzzTemp;}, }