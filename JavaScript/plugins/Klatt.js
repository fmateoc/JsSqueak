/* Smalltalk from Squeak4.5 with VMMaker 4.20.5 translated as JavaScript source on 4 November 2023 11:12:20 pm *//* Automatically generated by	JSPluginCodeGenerator * VMMakerJS-dtl.18 uuid: 544d97d2-2811-46b7-a653-5c1776f146a4   from	KlattSynthesizerPlugin * VMMaker-dtl.439 uuid: 2c8ef6e2-8460-4120-b973-009902597787 */var VM_PROXY_MAJOR = 1var VM_PROXY_MINOR = 11/*** Functions ***/function SIZEOF(obj) { return obj.pointers ? obj.pointers.length : obj.longs ? obj.longs.length : obj.words ? obj.words.length : obj.bytes ? obj.bytes.length : typeof obj === "bigint" ? ((obj >= 0 ? obj : -obj).toString(16).length + 1) >>> 1 : 0 }function BYTESIZEOF(obj) { return obj.bytes ? obj.bytes.length : obj.words ? obj.words.length * 4 : obj.longs ? obj.longs.length * 8 : typeof obj === "bigint" ? ((obj >= 0 ? obj : -obj).toString(16).length + 1) >>> 1 : 0 }function BYTESOF(obj) {	if (obj.bytes) return obj.bytes;	if (typeof obj === "bigint") {		let asString = (obj >= 0 ? obj : -obj).toString(16);		const length = (asString.length + 1) >>> 1;		asString = asString.padStart(length << 1, "0");		const bytes = new Uint8Array(length);		for (let i = length - 1, j = 0; i >= 0; i--)			bytes[i] = parseInt(asString.slice(j, j += 2), 16);		return bytes;	}}function CHECKEDINTEGER(val) {	return typeof val === "number" ? val : PrimitiveFailed.signal()}function CHECKEDBOOLEAN(val) {	return typeof val === "boolean"  ? val : PrimitiveFailed.signal()}function UBOR(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a | b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(a - 2147483648 | (b >= 2147483648 ? b - 2147483648 : b)) + 2147483648 :		(b >= 2147483648 ? (b - 2147483648 | a) + 2147483648 : b | a);	}	//unsigned bit orfunction UBORM(a, maskedB) {	a = a >>> 0;	return (a >= 2147483648 ? a - 2147483648 | maskedB : a | maskedB) + 2147483648;	}	//unsigned bit orfunction UBORS(a, smallB) {	if ((a | 0) === a)		return a | smallB;	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 | smallB) + 2147483648 : a | smallB;	}	//unsigned bit orfunction UBAND(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a & b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(b >= 2147483648 ? (b - 2147483648 & a - 2147483648) + 2147483648 : b & a - 2147483648) :		(b >= 2147483648 ? (b - 2147483648 & a) : b & a);	}	//unsigned bit andfunction UBANDM(a, maskedB) {	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 & maskedB) + 2147483648 : a & maskedB;	}	//unsigned bit andfunction UBANDS(a, smallB) {	if ((a | 0) === a)		return a & smallB;	a = a >>> 0;	return a >= 2147483648 ? a - 2147483648 & smallB : a & smallB;	}	//unsigned bit andfunction UBXOR(a, b) {	if ((a | 0) === a && (b | 0) === b)		return a ^ b;	a = a >>> 0; b = b >>> 0;	return a >= 2147483648 ?		(b >= 2147483648 ? b - 2147483648 ^ a - 2147483648 : (b ^ a - 2147483648) + 2147483648) :		(b >= 2147483648 ? (b - 2147483648 ^ a) + 2147483648 : b ^ a);	}	//unsigned bit xorfunction UBXORM(a, maskedB) {	a = a >>> 0;	return a >= 2147483648 ? a - 2147483648 ^ maskedB : (a ^ maskedB) + 2147483648;	}	//unsigned bit xorfunction UBXORS(a, smallB) {	if ((a | 0) === a)		return a ^ smallB;	a = a >>> 0;	return a >= 2147483648 ? (a - 2147483648 ^ smallB) + 2147483648 : a ^ smallB;	}	//unsigned bit xorfunction MOD(a, b) {	return a - Math.trunc(a / b) * b >>> 0; }   // signed modulusfunction SHL(a, b) {	return b > 31 ? (a === 1 && b === 32 ? 4294967296 : 0) : a << b >>> 0 }function SHR(a, b) {	return b > 31 ? 0 : a >>> b }function SHIFT(a, b) {	b = b | 0;	return b < 0 ? (b < -31 ? 0 : a >>> -b ) : (b > 31 ? (a === 1 && b === 32 ? 4294967296 : 0) : a << b >>> 0) }function PTR_ADD(p, n) { return new Int32Array(p.buffer, p.byteOffset + n * 4); }function CPTR_ADD(p, n) { return new Int8Array(p.buffer, p.byteOffset + n); }function FPTR_ADD(p, n) { return new Float32Array(p.buffer, p.byteOffset + n * 4); }function PTR_SUB(p, n) { return new Int32Array(p.buffer, p.byteOffset - n * 4); }function CPTR_SUB(p, n) { return new Int8Array(p.buffer, p.byteOffset - n); }function FPTR_SUB(p, n) { return new Float32Array(p.buffer, p.byteOffset - n * 4); }function PTR_PTRSUB(p1, p2) { return p1.buffer === p2.buffer ? p1.byteOffset - p2.byteOffset : 0 }/*** Variables ***/let a1 = 0;let a2 = 0;let b1 = 0;let c1 = 0;let cascade = 0;let frame;let glast = 0;let nlast = 0;let nmod = 0;let nopen = 0;let nper = 0;let periodCount = 0;let pitch = 0;let resonators;let samplesCount = 0;let samplesPerFrame = 0;let samplingRate = 0;let seed = 0;let t0 = 0;let vlast = 0;let x1 = 0;let x2 = 0;globalThis.Klatt = {/*	Answer a random number between 0 and 65535. */nextRandom() {	seed = UBANDS(((seed * 1309) + 13849), 65535);	return seed;}, primitiveSynthesizeFrameIntoStartingAt(oop, bufferOop, startIndex) {	let aKlattFrame;	let buffer;	let oop1;	let ampGain;	let aspiration;	let aspirationNoise;	let bypass;	let friction;	let frictionNoise;	let gain;	let glotout;	let index;	let noise;	let out;	let parGlotout;	let parVoicing;	let source;	let temp;	let top;	let turbulence;	let voice;	let voicing;	let answer;	let p1;	let a;	let arg;	let b;	let c;	let r;	let ampF1V;	let ampF2F;	let ampF2V;	let ampF3F;	let ampF3V;	let ampF4F;	let ampF4V;	let ampF5F;	let ampF6F;	let ampFNV;	let ampFTV;	let a25;	let arg23;	let b24;	let c24;	let r23;	let a3;	let arg1;	let b2;	let c2;	let r1;	let a4;	let arg2;	let b3;	let c3;	let r2;	let a5;	let arg3;	let b4;	let c4;	let r3;	let a6;	let arg4;	let b5;	let c5;	let r4;	let a7;	let arg5;	let b6;	let c6;	let r5;	let a8;	let arg6;	let b7;	let c7;	let r6;	let a9;	let arg7;	let b8;	let c8;	let r7;	let a10;	let arg8;	let b9;	let c9;	let r8;	let a11;	let arg9;	let b10;	let c10;	let r9;	let a12;	let arg10;	let b11;	let c11;	let r10;	let a13;	let arg11;	let b12;	let c12;	let r11;	let a14;	let arg12;	let b13;	let c13;	let r12;	let a15;	let arg13;	let b14;	let c14;	let r13;	let a16;	let arg14;	let b15;	let c15;	let r14;	let a17;	let arg15;	let b16;	let c16;	let r15;	let a18;	let arg16;	let b17;	let c17;	let r16;	let a19;	let arg17;	let b18;	let c18;	let r17;	let a20;	let arg18;	let b19;	let c19;	let r18;	let a21;	let arg19;	let b20;	let c20;	let r19;	let a22;	let arg20;	let b21;	let c21;	let r20;	let a23;	let arg21;	let b22;	let c22;	let r21;	let a24;	let arg22;	let b23;	let c23;	let r22;	let out1;	let answer12;	let p112;	let answer1;	let p11;	let answer2;	let p12;	let answer3;	let p13;	let answer4;	let p14;	let answer5;	let p15;	let answer6;	let p16;	let answer7;	let p17;	let answer8;	let p18;	let answer9;	let p19;	let answer10;	let p110;	let answer11;	let p111;	let x0;	let asin;	let bsin;	let csin;	let deltaF0;	let timeCount;	let cosphi;	let d;	let gamma;	let gammapwr;	let phi;	let r24;	let ra;	let rho;	let rk;	let ro;	let rphid;	let sinphi;	let te;	let theta;	let u;	let ingore;	let s0;	let s1;	let s2;	let qa;	let qb;	let qc;	let qzero;	let ua;	let ub;	let uc;	let expuphi;	let expuphi1;	let expuphi2;	let expuphi3;	let expuphi4;	let expuphi5;	/* begin checkedFloatPtrOf: */	if ((oop.storageType !== "words")) throw Object.create(PrimitiveFailed).setPayload(1);	aKlattFrame = oop.wordsAsFloat32Array();	/* end checkedFloatPtrOf: */	/* begin checkedShortPtrOf: */	oop1 = bufferOop;	if ((oop1.storageType !== "words")) throw Object.create(PrimitiveFailed).setPayload(1);	buffer = oop1.wordsAsInt16Array();	/* end checkedShortPtrOf: */	if (!(typeof startIndex === "number")) throw Object.create(PrimitiveFailed).setPayload(1);	if (typeof this === "number") throw Object.create(PrimitiveFailed).setPayload(1);	/* begin loadFrom: */	if (SIZEOF(this) !== 22) throw Object.create(PrimitiveFailed).setPayload(1);	/* end loadFrom: */	if ((SIZEOF(bufferOop) * 2) < samplesPerFrame) throw Object.create(PrimitiveFailed).setPayload(1);	/* begin synthesizeFrame:into:startingAt: */	/* begin setCurrentFrame: */	frame = aKlattFrame;	ampFNV = (Math.pow(2.0,((frame[45] - 87.0) / 6.0)) * 32.767) * 0.6;	ampFTV = (Math.pow(2.0,((frame[50] - 87.0) / 6.0)) * 32.767) * 0.6;	ampF1V = (Math.pow(2.0,((frame[46] - 87.0) / 6.0)) * 32.767) * 0.4;	ampF2V = (Math.pow(2.0,((frame[47] - 87.0) / 6.0)) * 32.767) * 0.15;	ampF3V = (Math.pow(2.0,((frame[48] - 87.0) / 6.0)) * 32.767) * 0.06;	ampF4V = (Math.pow(2.0,((frame[49] - 87.0) / 6.0)) * 32.767) * 0.04;	ampF2F = (Math.pow(2.0,((frame[34] - 87.0) / 6.0)) * 32.767) * 0.15;	ampF3F = (Math.pow(2.0,((frame[35] - 87.0) / 6.0)) * 32.767) * 0.06;	ampF4F = (Math.pow(2.0,((frame[36] - 87.0) / 6.0)) * 32.767) * 0.04;	ampF5F = (Math.pow(2.0,((frame[37] - 87.0) / 6.0)) * 32.767) * 0.022;	ampF6F = (Math.pow(2.0,((frame[38] - 87.0) / 6.0)) * 32.767) * 0.03;	if (cascade >= 8) {		if (samplingRate >= 16000) {			/* begin resonator:frequency:bandwidth: */			arg23 = ((-3.141592653589793) / samplingRate) * 600;			r23 = Math.exp(arg23);			c24 = 0.0 - (r23 * r23);			arg23 = ((6.283185307179586) / samplingRate) * 7500;			b24 = (r23 * Math.cos(arg23)) * 2.0;			a25 = 1.0 - b24 - c24;			/* begin resonatorA:put: */			resonators[90] = a25;			/* end resonatorA:put: */			/* begin resonatorB:put: */			resonators[91] = b24;			/* end resonatorB:put: */			/* begin resonatorC:put: */			resonators[92] = c24;			/* end resonatorC:put: */			/* end resonator:frequency:bandwidth: */		} else {			cascade = 6;		}	}	if (cascade >= 7) {		if (samplingRate >= 16000) {			/* begin resonator:frequency:bandwidth: */			arg1 = ((-3.141592653589793) / samplingRate) * 500;			r1 = Math.exp(arg1);			c2 = 0.0 - (r1 * r1);			arg1 = ((6.283185307179586) / samplingRate) * 6500;			b2 = (r1 * Math.cos(arg1)) * 2.0;			a3 = 1.0 - b2 - c2;			/* begin resonatorA:put: */			resonators[85] = a3;			/* end resonatorA:put: */			/* begin resonatorB:put: */			resonators[86] = b2;			/* end resonatorB:put: */			/* begin resonatorC:put: */			resonators[87] = c2;			/* end resonatorC:put: */			/* end resonator:frequency:bandwidth: */		} else {			cascade = 6;		}	}	if (cascade >= 6) {		/* begin resonator:frequency:bandwidth: */		arg2 = ((-3.141592653589793) / samplingRate) * frame[25];		r2 = Math.exp(arg2);		c3 = 0.0 - (r2 * r2);		arg2 = ((6.283185307179586) / samplingRate) * frame[24];		b3 = (r2 * Math.cos(arg2)) * 2.0;		a4 = 1.0 - b3 - c3;		/* begin resonatorA:put: */		resonators[80] = a4;		/* end resonatorA:put: */		/* begin resonatorB:put: */		resonators[81] = b3;		/* end resonatorB:put: */		/* begin resonatorC:put: */		resonators[82] = c3;		/* end resonatorC:put: */		/* end resonator:frequency:bandwidth: */	}	if (cascade >= 5) {		/* begin resonator:frequency:bandwidth: */		arg3 = ((-3.141592653589793) / samplingRate) * frame[23];		r3 = Math.exp(arg3);		c4 = 0.0 - (r3 * r3);		arg3 = ((6.283185307179586) / samplingRate) * frame[22];		b4 = (r3 * Math.cos(arg3)) * 2.0;		a5 = 1.0 - b4 - c4;		/* begin resonatorA:put: */		resonators[75] = a5;		/* end resonatorA:put: */		/* begin resonatorB:put: */		resonators[76] = b4;		/* end resonatorB:put: */		/* begin resonatorC:put: */		resonators[77] = c4;		/* end resonatorC:put: */		/* end resonator:frequency:bandwidth: */	}	/* begin resonator:frequency:bandwidth: */	arg4 = ((-3.141592653589793) / samplingRate) * frame[21];	r4 = Math.exp(arg4);	c5 = 0.0 - (r4 * r4);	arg4 = ((6.283185307179586) / samplingRate) * frame[20];	b5 = (r4 * Math.cos(arg4)) * 2.0;	a6 = 1.0 - b5 - c5;	/* begin resonatorA:put: */	resonators[70] = a6;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[71] = b5;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[72] = c5;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonator:frequency:bandwidth: */	arg5 = ((-3.141592653589793) / samplingRate) * frame[19];	r5 = Math.exp(arg5);	c6 = 0.0 - (r5 * r5);	arg5 = ((6.283185307179586) / samplingRate) * frame[18];	b6 = (r5 * Math.cos(arg5)) * 2.0;	a7 = 1.0 - b6 - c6;	/* begin resonatorA:put: */	resonators[65] = a7;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[66] = b6;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[67] = c6;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonator:frequency:bandwidth: */	arg6 = ((-3.141592653589793) / samplingRate) * frame[17];	r6 = Math.exp(arg6);	c7 = 0.0 - (r6 * r6);	arg6 = ((6.283185307179586) / samplingRate) * frame[16];	b7 = (r6 * Math.cos(arg6)) * 2.0;	a8 = 1.0 - b7 - c7;	/* begin resonatorA:put: */	resonators[60] = a8;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[61] = b7;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[62] = c7;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonator:frequency:bandwidth: */	arg7 = ((-3.141592653589793) / samplingRate) * frame[13];	r7 = Math.exp(arg7);	c8 = 0.0 - (r7 * r7);	arg7 = ((6.283185307179586) / samplingRate) * frame[12];	b8 = (r7 * Math.cos(arg7)) * 2.0;	a9 = 1.0 - b8 - c8;	/* begin resonatorA:put: */	resonators[55] = a9;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[56] = b8;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[57] = c8;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonator:frequency:bandwidth: */	arg8 = ((-3.141592653589793) / samplingRate) * frame[27];	r8 = Math.exp(arg8);	c9 = 0.0 - (r8 * r8);	arg8 = ((6.283185307179586) / samplingRate) * frame[26];	b9 = (r8 * Math.cos(arg8)) * 2.0;	a10 = 1.0 - b9 - c9;	/* begin resonatorA:put: */	resonators[95] = a10;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[96] = b9;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[97] = c9;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonator:frequency:bandwidth: */	arg9 = ((-3.141592653589793) / samplingRate) * frame[31];	r9 = Math.exp(arg9);	c10 = 0.0 - (r9 * r9);	arg9 = ((6.283185307179586) / samplingRate) * frame[30];	b10 = (r9 * Math.cos(arg9)) * 2.0;	a11 = 1.0 - b10 - c10;	/* begin resonatorA:put: */	resonators[105] = a11;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[106] = b10;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[107] = c10;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin antiResonator:frequency:bandwidth: */	arg10 = ((-3.141592653589793) / samplingRate) * frame[29];	r10 = Math.exp(arg10);	c11 = 0.0 - (r10 * r10);	arg10 = ((6.283185307179586) / samplingRate) * frame[28];	b11 = (r10 * Math.cos(arg10)) * 2.0;	a12 = 1.0 - b11 - c11;	a12 = 1.0 / a12;	b11 = (0.0 - b11) * a12;	c11 = (0.0 - c11) * a12;	/* begin resonatorA:put: */	resonators[100] = a12;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[101] = b11;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[102] = c11;	/* end resonatorC:put: */	/* end antiResonator:frequency:bandwidth: */	/* begin antiResonator:frequency:bandwidth: */	arg11 = ((-3.141592653589793) / samplingRate) * frame[33];	r11 = Math.exp(arg11);	c12 = 0.0 - (r11 * r11);	arg11 = ((6.283185307179586) / samplingRate) * frame[32];	b12 = (r11 * Math.cos(arg11)) * 2.0;	a13 = 1.0 - b12 - c12;	a13 = 1.0 / a13;	b12 = (0.0 - b12) * a13;	c12 = (0.0 - c12) * a13;	/* begin resonatorA:put: */	resonators[110] = a13;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[111] = b12;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[112] = c12;	/* end resonatorC:put: */	/* end antiResonator:frequency:bandwidth: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg12 = ((-3.141592653589793) / samplingRate) * frame[27];	r12 = Math.exp(arg12);	c13 = 0.0 - (r12 * r12);	arg12 = ((6.283185307179586) / samplingRate) * frame[26];	b13 = (r12 * Math.cos(arg12)) * 2.0;	a14 = 1.0 - b13 - c13;	/* begin resonatorA:put: */	resonators[0] = a14;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[1] = b13;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[2] = c13;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[0] = (resonators[0] * ampFNV);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg13 = ((-3.141592653589793) / samplingRate) * frame[31];	r13 = Math.exp(arg13);	c14 = 0.0 - (r13 * r13);	arg13 = ((6.283185307179586) / samplingRate) * frame[30];	b14 = (r13 * Math.cos(arg13)) * 2.0;	a15 = 1.0 - b14 - c14;	/* begin resonatorA:put: */	resonators[5] = a15;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[6] = b14;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[7] = c14;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[5] = (resonators[5] * ampFTV);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg14 = ((-3.141592653589793) / samplingRate) * frame[13];	r14 = Math.exp(arg14);	c15 = 0.0 - (r14 * r14);	arg14 = ((6.283185307179586) / samplingRate) * frame[12];	b15 = (r14 * Math.cos(arg14)) * 2.0;	a16 = 1.0 - b15 - c15;	/* begin resonatorA:put: */	resonators[10] = a16;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[11] = b15;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[12] = c15;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[10] = (resonators[10] * ampF1V);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg15 = ((-3.141592653589793) / samplingRate) * frame[17];	r15 = Math.exp(arg15);	c16 = 0.0 - (r15 * r15);	arg15 = ((6.283185307179586) / samplingRate) * frame[16];	b16 = (r15 * Math.cos(arg15)) * 2.0;	a17 = 1.0 - b16 - c16;	/* begin resonatorA:put: */	resonators[15] = a17;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[16] = b16;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[17] = c16;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[15] = (resonators[15] * ampF2V);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg16 = ((-3.141592653589793) / samplingRate) * frame[19];	r16 = Math.exp(arg16);	c17 = 0.0 - (r16 * r16);	arg16 = ((6.283185307179586) / samplingRate) * frame[18];	b17 = (r16 * Math.cos(arg16)) * 2.0;	a18 = 1.0 - b17 - c17;	/* begin resonatorA:put: */	resonators[20] = a18;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[21] = b17;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[22] = c17;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[20] = (resonators[20] * ampF3V);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg17 = ((-3.141592653589793) / samplingRate) * frame[21];	r17 = Math.exp(arg17);	c18 = 0.0 - (r17 * r17);	arg17 = ((6.283185307179586) / samplingRate) * frame[20];	b18 = (r17 * Math.cos(arg17)) * 2.0;	a19 = 1.0 - b18 - c18;	/* begin resonatorA:put: */	resonators[25] = a19;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[26] = b18;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[27] = c18;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[25] = (resonators[25] * ampF4V);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg18 = ((-3.141592653589793) / samplingRate) * frame[40];	r18 = Math.exp(arg18);	c19 = 0.0 - (r18 * r18);	arg18 = ((6.283185307179586) / samplingRate) * frame[16];	b19 = (r18 * Math.cos(arg18)) * 2.0;	a20 = 1.0 - b19 - c19;	/* begin resonatorA:put: */	resonators[30] = a20;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[31] = b19;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[32] = c19;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[30] = (resonators[30] * ampF2F);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg19 = ((-3.141592653589793) / samplingRate) * frame[41];	r19 = Math.exp(arg19);	c20 = 0.0 - (r19 * r19);	arg19 = ((6.283185307179586) / samplingRate) * frame[18];	b20 = (r19 * Math.cos(arg19)) * 2.0;	a21 = 1.0 - b20 - c20;	/* begin resonatorA:put: */	resonators[35] = a21;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[36] = b20;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[37] = c20;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[35] = (resonators[35] * ampF3F);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg20 = ((-3.141592653589793) / samplingRate) * frame[42];	r20 = Math.exp(arg20);	c21 = 0.0 - (r20 * r20);	arg20 = ((6.283185307179586) / samplingRate) * frame[20];	b21 = (r20 * Math.cos(arg20)) * 2.0;	a22 = 1.0 - b21 - c21;	/* begin resonatorA:put: */	resonators[40] = a22;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[41] = b21;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[42] = c21;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[40] = (resonators[40] * ampF4F);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg21 = ((-3.141592653589793) / samplingRate) * frame[43];	r21 = Math.exp(arg21);	c22 = 0.0 - (r21 * r21);	arg21 = ((6.283185307179586) / samplingRate) * frame[22];	b22 = (r21 * Math.cos(arg21)) * 2.0;	a23 = 1.0 - b22 - c22;	/* begin resonatorA:put: */	resonators[45] = a23;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[46] = b22;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[47] = c22;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[45] = (resonators[45] * ampF5F);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg22 = ((-3.141592653589793) / samplingRate) * frame[44];	r22 = Math.exp(arg22);	c23 = 0.0 - (r22 * r22);	arg22 = ((6.283185307179586) / samplingRate) * frame[24];	b23 = (r22 * Math.cos(arg22)) * 2.0;	a24 = 1.0 - b23 - c23;	/* begin resonatorA:put: */	resonators[50] = a24;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[51] = b23;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[52] = c23;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[50] = (resonators[50] * ampF6F);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	/* end setCurrentFrame: */	if (pitch > 0) {		voicing = Math.pow(2.0,((frame[5] - 94.0) / 6.0)) * 32.767;		parVoicing = Math.pow(2.0,((frame[5] - 87.0) / 6.0)) * 32.767;		turbulence = (Math.pow(2.0,((frame[11] - 87.0) / 6.0)) * 32.767) * 0.1;	} else {		parVoicing = turbulence = voicing = 0.0;	}	friction = (Math.pow(2.0,((frame[10] - 87.0) / 6.0)) * 32.767) * 0.25;	aspiration = (Math.pow(2.0,((frame[9] - 87.0) / 6.0)) * 32.767) * 0.05;	bypass = (Math.pow(2.0,((frame[39] - 87.0) / 6.0)) * 32.767) * 0.05;	gain = frame[51] - 3;	if (gain <= 0) {		gain = 57;	}	ampGain = Math.pow(2.0,((gain - 87.0) / 6.0)) * 32.767;	/* begin resonator:frequency:bandwidth:gain: */	/* begin resonator:frequency:bandwidth: */	arg = ((-3.141592653589793) / samplingRate) * samplingRate;	r = Math.exp(arg);	c = 0.0 - (r * r);	arg = ((6.283185307179586) / samplingRate) * 0;	b = (r * Math.cos(arg)) * 2.0;	a = 1.0 - b - c;	/* begin resonatorA:put: */	resonators[115] = a;	/* end resonatorA:put: */	/* begin resonatorB:put: */	resonators[116] = b;	/* end resonatorB:put: */	/* begin resonatorC:put: */	resonators[117] = c;	/* end resonatorC:put: */	/* end resonator:frequency:bandwidth: */	/* begin resonatorA:put: */	resonators[115] = (resonators[115] * ampGain);	/* end resonatorA:put: */	/* end resonator:frequency:bandwidth:gain: */	noise = nlast;	index = startIndex;	top = (samplesPerFrame + startIndex) - 1;	while (index <= top) {		noise = (Klatt.nextRandom.apply(this, arguments) - 32768) / 4.0;		noise += 0.75 * nlast;		nlast = noise;		if (nper > nmod) {			noise = noise * 0.5;		}		frictionNoise = friction * noise;		/* begin glottalSource */		if (t0 === 0) {			voice = 0;		} else {			if (nper < nopen) {				x0 = (a1 * x1) + (a2 * x2);				x2 = x1;			} else {				x0 = (b1 * x1) - c1;			}			x1 = x0;			if (nper >= t0) {				nper = 0;				/* begin pitchSynchronousReset */				if (frame[0] > 0) {					/* begin voicedPitchSynchronousReset */					pitch = frame[0];					/* begin addFlutter */					timeCount = samplesCount / samplingRate;					asin = Math.sin((79.79645340118074) * timeCount);					bsin = Math.sin((44.61061568097506) * timeCount);					csin = Math.sin((29.530970943744055) * timeCount);					deltaF0 = (((frame[1] * 2.0) * frame[0]) / 100.0) * ((asin + bsin) + csin);					pitch += deltaF0;					/* end addFlutter */					/* begin addJitter */					pitch += (((Klatt.nextRandom.apply(this, arguments) - 32767) * frame[2]) / 32768.0) * frame[0];					/* end addJitter */					/* begin addFrequencyDiplophonia */					pitch = ((MOD(periodCount, 2)) === 0) ? (pitch + ((frame[4] * frame[0]) * (1.0 - frame[6]))) : (pitch - ((frame[4] * frame[0]) * (1.0 - frame[6])));					/* end addFrequencyDiplophonia */					if (pitch < 0) {						pitch = 0;					}					t0 = ((samplingRate / pitch) | 0);					nmod = t0;					if (frame[5] > 0) {						nmod = nmod >> 1;					}					nopen = ((t0 * frame[6]) | 0);					/* begin ro:ra:rk: */					te = ((t0 * frame[6]) | 0);					ro = te / t0;					rk = frame[8];					ra = frame[7];					if (ra <= 0.0) {						d = 1.0;					} else {						r24 = (1.0 - ro) / ra;						d = 1.0 - (r24 / (Math.exp(r24) - 1.0));					}					phi = 3.141592653589793 * (rk + 1.0);					cosphi = Math.cos(phi);					sinphi = Math.sin(phi);					rphid = ((ra / ro) * phi) * d;					/* begin zeroQphi:cosphi:sinphi:rphid: */					/* begin qu:phi:cosphi:sinphi:rphid: */					expuphi5 = Math.exp(0 * phi);					qzero = (expuphi5 * ((((rphid * (1.0))) * sinphi) - cosphi)) + 1.0;					/* end qu:phi:cosphi:sinphi:rphid: */					if (qzero > 0) {						ua = 0;						ub = 1;						qa = qzero;						/* begin qu:phi:cosphi:sinphi:rphid: */						expuphi1 = Math.exp(ub * phi);						qb = (expuphi1 * ((((rphid * ((ub * ub) + 1.0)) + ub) * sinphi) - cosphi)) + 1.0;						/* end qu:phi:cosphi:sinphi:rphid: */						while (qb > 0) {							ua = ub;							qa = qb;							ub = ub * 2;							/* begin qu:phi:cosphi:sinphi:rphid: */							expuphi = Math.exp(ub * phi);							qb = (expuphi * ((((rphid * ((ub * ub) + 1.0)) + ub) * sinphi) - cosphi)) + 1.0;							/* end qu:phi:cosphi:sinphi:rphid: */						}					} else {						ua = -1;						ub = 0;						/* begin qu:phi:cosphi:sinphi:rphid: */						expuphi3 = Math.exp(ua * phi);						qa = (expuphi3 * ((((rphid * ((ua * ua) + 1.0)) + ua) * sinphi) - cosphi)) + 1.0;						/* end qu:phi:cosphi:sinphi:rphid: */						qb = qzero;						while (qa < 0) {							ub = ua;							qb = qa;							ua = ua * 2;							/* begin qu:phi:cosphi:sinphi:rphid: */							expuphi2 = Math.exp(ua * phi);							qa = (expuphi2 * ((((rphid * ((ua * ua) + 1.0)) + ua) * sinphi) - cosphi)) + 1.0;							/* end qu:phi:cosphi:sinphi:rphid: */						}					}					while ((ub - ua) > 0.0001) {						uc = (ub + ua) / 2.0;						/* begin qu:phi:cosphi:sinphi:rphid: */						expuphi4 = Math.exp(uc * phi);						qc = (expuphi4 * ((((rphid * ((uc * uc) + 1.0)) + uc) * sinphi) - cosphi)) + 1.0;						/* end qu:phi:cosphi:sinphi:rphid: */						if (qc > 0) {							ua = uc;							qa = qc;						} else {							ub = uc;							qb = qc;						}					}					u = (ub + ua) / 2.0;					/* end zeroQphi:cosphi:sinphi:rphid: */					theta = phi / te;					rho = Math.exp(u * theta);					a1 = (2.0 * Math.cos(theta)) * rho;					a2 = 0.0 - (rho * rho);					x2 = 0.0;					x1 = rho * Math.sin(theta);					gamma = Math.exp(-1.0 / (ra * t0));					gammapwr = Math.pow(gamma,(t0 - te));					b1 = gamma;					c1 = ((1.0 - gamma) * gammapwr) / (1.0 - gammapwr);					/* begin normalizeGlottalPulse */					s0 = 0.0;					s1 = x1;					s2 = x2;					for (ingore = 1; ingore <= nopen; ingore++) {						s0 = (a1 * s1) + (a2 * s2);						s2 = s1;						s1 = s0;					}					if (s0 !== 0.0) {						x1 = (x1 / s0) * 10000.0;					}					/* end normalizeGlottalPulse */					/* end ro:ra:rk: */					/* begin addShimmer */					x1 += (((Klatt.nextRandom.apply(this, arguments) - 32767) * frame[3]) / 32768.0) * x1;					if (x1 > 0) {						x1 = 0;					}					/* end addShimmer */					/* begin addAmplitudeDiplophonia */					if ((MOD(periodCount, 2)) !== 0) {						x1 = x1 * (1.0 - frame[4]);						if (x1 > 0) {							x1 = 0;						}					}					/* end addAmplitudeDiplophonia */					/* end voicedPitchSynchronousReset */					periodCount = MOD((periodCount + 1), 65535);				} else {					t0 = 1;					nmod = t0;				}				/* end pitchSynchronousReset */			}			++nper;			voice = x0;		}		/* end glottalSource */		vlast = voice;		if (nper < nopen) {			voice += (turbulence * (Klatt.nextRandom.apply(this, arguments) - 32768)) / 4.0;		}		glotout = voicing * voice;		parGlotout = parVoicing * voice;		aspirationNoise = aspiration * noise;		glotout += aspirationNoise;		parGlotout += aspirationNoise;		/* begin cascadeBranch: */		if (cascade > 0) {			/* begin antiResonator:value: */			answer12 = ((resonators[100] * glotout) + (resonators[101] * ((p112 = resonators[103])))) + (resonators[102] * resonators[104]);			/* begin resonatorP2:put: */			resonators[104] = p112;			/* end resonatorP2:put: */			/* begin resonatorP1:put: */			resonators[103] = glotout;			/* end resonatorP1:put: */			out1 = answer12;			/* end antiResonator:value: */			/* begin resonator:value: */			answer10 = ((resonators[95] * out1) + (resonators[96] * ((p110 = resonators[98])))) + (resonators[97] * resonators[99]);			/* begin resonatorP2:put: */			resonators[99] = p110;			/* end resonatorP2:put: */			/* begin resonatorP1:put: */			resonators[98] = answer10;			/* end resonatorP1:put: */			out1 = answer10;			/* end resonator:value: */			/* begin antiResonator:value: */			answer1 = ((resonators[110] * out1) + (resonators[111] * ((p11 = resonators[113])))) + (resonators[112] * resonators[114]);			/* begin resonatorP2:put: */			resonators[114] = p11;			/* end resonatorP2:put: */			/* begin resonatorP1:put: */			resonators[113] = out1;			/* end resonatorP1:put: */			out1 = answer1;			/* end antiResonator:value: */			/* begin resonator:value: */			answer11 = ((resonators[105] * out1) + (resonators[106] * ((p111 = resonators[108])))) + (resonators[107] * resonators[109]);			/* begin resonatorP2:put: */			resonators[109] = p111;			/* end resonatorP2:put: */			/* begin resonatorP1:put: */			resonators[108] = answer11;			/* end resonatorP1:put: */			out1 = answer11;			/* end resonator:value: */			if (cascade >= 8) {				/* begin resonator:value: */				answer2 = ((resonators[90] * out1) + (resonators[91] * ((p12 = resonators[93])))) + (resonators[92] * resonators[94]);				/* begin resonatorP2:put: */				resonators[94] = p12;				/* end resonatorP2:put: */				/* begin resonatorP1:put: */				resonators[93] = answer2;				/* end resonatorP1:put: */				out1 = answer2;				/* end resonator:value: */			}			if (cascade >= 7) {				/* begin resonator:value: */				answer3 = ((resonators[85] * out1) + (resonators[86] * ((p13 = resonators[88])))) + (resonators[87] * resonators[89]);				/* begin resonatorP2:put: */				resonators[89] = p13;				/* end resonatorP2:put: */				/* begin resonatorP1:put: */				resonators[88] = answer3;				/* end resonatorP1:put: */				out1 = answer3;				/* end resonator:value: */			}			if (cascade >= 6) {				/* begin resonator:value: */				answer4 = ((resonators[80] * out1) + (resonators[81] * ((p14 = resonators[83])))) + (resonators[82] * resonators[84]);				/* begin resonatorP2:put: */				resonators[84] = p14;				/* end resonatorP2:put: */				/* begin resonatorP1:put: */				resonators[83] = answer4;				/* end resonatorP1:put: */				out1 = answer4;				/* end resonator:value: */			}			if (cascade >= 5) {				/* begin resonator:value: */				answer5 = ((resonators[75] * out1) + (resonators[76] * ((p15 = resonators[78])))) + (resonators[77] * resonators[79]);				/* begin resonatorP2:put: */				resonators[79] = p15;				/* end resonatorP2:put: */				/* begin resonatorP1:put: */				resonators[78] = answer5;				/* end resonatorP1:put: */				out1 = answer5;				/* end resonator:value: */			}			if (cascade >= 4) {				/* begin resonator:value: */				answer6 = ((resonators[70] * out1) + (resonators[71] * ((p16 = resonators[73])))) + (resonators[72] * resonators[74]);				/* begin resonatorP2:put: */				resonators[74] = p16;				/* end resonatorP2:put: */				/* begin resonatorP1:put: */				resonators[73] = answer6;				/* end resonatorP1:put: */				out1 = answer6;				/* end resonator:value: */			}			if (cascade >= 3) {				/* begin resonator:value: */				answer7 = ((resonators[65] * out1) + (resonators[66] * ((p17 = resonators[68])))) + (resonators[67] * resonators[69]);				/* begin resonatorP2:put: */				resonators[69] = p17;				/* end resonatorP2:put: */				/* begin resonatorP1:put: */				resonators[68] = answer7;				/* end resonatorP1:put: */				out1 = answer7;				/* end resonator:value: */			}			if (cascade >= 2) {				/* begin resonator:value: */				answer8 = ((resonators[60] * out1) + (resonators[61] * ((p18 = resonators[63])))) + (resonators[62] * resonators[64]);				/* begin resonatorP2:put: */				resonators[64] = p18;				/* end resonatorP2:put: */				/* begin resonatorP1:put: */				resonators[63] = answer8;				/* end resonatorP1:put: */				out1 = answer8;				/* end resonator:value: */			}			if (cascade >= 1) {				/* begin resonator:value: */				answer9 = ((resonators[55] * out1) + (resonators[56] * ((p19 = resonators[58])))) + (resonators[57] * resonators[59]);				/* begin resonatorP2:put: */				resonators[59] = p19;				/* end resonatorP2:put: */				/* begin resonatorP1:put: */				resonators[58] = answer9;				/* end resonatorP1:put: */				out1 = answer9;				/* end resonator:value: */			}			out = out1;		} else {			out = 0.0;		}		/* end cascadeBranch: */		source = parGlotout;		out += ((((Klatt.resonatorvalue(3, source) + Klatt.resonatorvalue(4, source)) + Klatt.resonatorvalue(5, source)) + Klatt.resonatorvalue(6, source)) + Klatt.resonatorvalue(1, source)) + Klatt.resonatorvalue(2, source);		source = (frictionNoise + parGlotout) - glast;		glast = parGlotout;		out = ((((Klatt.resonatorvalue(7, source) - Klatt.resonatorvalue(8, source)) + Klatt.resonatorvalue(9, source)) - Klatt.resonatorvalue(10, source)) + Klatt.resonatorvalue(11, source)) - out;		out = (bypass * source) - out;		/* begin resonator:value: */		answer = ((resonators[115] * out) + (resonators[116] * ((p1 = resonators[118])))) + (resonators[117] * resonators[119]);		/* begin resonatorP2:put: */		resonators[119] = p1;		/* end resonatorP2:put: */		/* begin resonatorP1:put: */		resonators[118] = answer;		/* end resonatorP1:put: */		out = answer;		/* end resonator:value: */		temp = ((out * ampGain) | 0);		if (temp < -32768) {			temp = -32768;		}		if (temp > 32767) {			temp = 32767;		}		buffer[index - 1] = temp;		++index;		++samplesCount;	}	/* end synthesizeFrame:into:startingAt: */	/* begin saveTo: */	SmalltalkVM.pushRemappableOop(this);	SmalltalkVM.pushRemappableOop(typeof pitch.valueOf() !== "number" ? PrimitiveFailed.signal() : ((pitch.valueOf() | 0 === pitch.valueOf()) || Number.isSafeInteger(pitch) ? new Float(pitch) : pitch.valueOf()));	SmalltalkVM.pushRemappableOop(typeof a1.valueOf() !== "number" ? PrimitiveFailed.signal() : ((a1.valueOf() | 0 === a1.valueOf()) || Number.isSafeInteger(a1) ? new Float(a1) : a1.valueOf()));	SmalltalkVM.pushRemappableOop(typeof a2.valueOf() !== "number" ? PrimitiveFailed.signal() : ((a2.valueOf() | 0 === a2.valueOf()) || Number.isSafeInteger(a2) ? new Float(a2) : a2.valueOf()));	SmalltalkVM.pushRemappableOop(typeof x1.valueOf() !== "number" ? PrimitiveFailed.signal() : ((x1.valueOf() | 0 === x1.valueOf()) || Number.isSafeInteger(x1) ? new Float(x1) : x1.valueOf()));	SmalltalkVM.pushRemappableOop(typeof x2.valueOf() !== "number" ? PrimitiveFailed.signal() : ((x2.valueOf() | 0 === x2.valueOf()) || Number.isSafeInteger(x2) ? new Float(x2) : x2.valueOf()));	SmalltalkVM.pushRemappableOop(typeof b1.valueOf() !== "number" ? PrimitiveFailed.signal() : ((b1.valueOf() | 0 === b1.valueOf()) || Number.isSafeInteger(b1) ? new Float(b1) : b1.valueOf()));	SmalltalkVM.pushRemappableOop(typeof c1.valueOf() !== "number" ? PrimitiveFailed.signal() : ((c1.valueOf() | 0 === c1.valueOf()) || Number.isSafeInteger(c1) ? new Float(c1) : c1.valueOf()));	SmalltalkVM.pushRemappableOop(typeof glast.valueOf() !== "number" ? PrimitiveFailed.signal() : ((glast.valueOf() | 0 === glast.valueOf()) || Number.isSafeInteger(glast) ? new Float(glast) : glast.valueOf()));	SmalltalkVM.pushRemappableOop(typeof vlast.valueOf() !== "number" ? PrimitiveFailed.signal() : ((vlast.valueOf() | 0 === vlast.valueOf()) || Number.isSafeInteger(vlast) ? new Float(vlast) : vlast.valueOf()));	typeof nlast.valueOf() !== "number" ? PrimitiveFailed.signal() : ((nlast.valueOf() | 0 === nlast.valueOf()) || Number.isSafeInteger(nlast) ? new Float(nlast) : nlast.valueOf());	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	SmalltalkVM.popRemappableOop();	/* end saveTo: */	throw Object.create(PrimitiveReturn).setPayload(this);}, resonatorvalue(index, aFloat) {	let answer;	let p1;	/* (p1 between: -100000 and: 100000) ifFalse: [self halt].	(answer between: -100000 and: 100000) ifFalse: [self halt]. */	answer = ((resonators[(index * 5) - 5] * aFloat) + (resonators[(index * 5) - 4] * ((p1 = resonators[(index * 5) - 2])))) + (resonators[(index * 5) - 3] * resonators[(index * 5) - 1]);	/* begin resonatorP2:put: */	resonators[(index * 5) - 1] = p1;	/* end resonatorP2:put: */	/* begin resonatorP1:put: */	resonators[(index * 5) - 2] = answer;	/* end resonatorP1:put: */	return answer;}, }